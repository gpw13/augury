% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict_average.R
\name{predict_average}
\alias{predict_average}
\title{Use averages to impute and forecast data}
\usage{
predict_average(
  df,
  col = "value",
  average_cols = NULL,
  weight_col = NULL,
  flat_extrap = TRUE,
  ret = c("df", "all", "error"),
  test_col = NULL,
  test_period = NULL,
  test_period_flex = NULL,
  group_col = "iso3",
  obs_filter = NULL,
  sort_col = "year",
  sort_descending = FALSE,
  pred_col = "pred",
  type_col = NULL,
  types = c("imputed", "imputed", "projected"),
  source_col = NULL,
  source = NULL,
  scenario_detail_col = NULL,
  scenario_detail = NULL,
  replace_obs = c("missing", "all", "none"),
  error_correct = FALSE,
  error_correct_cols = NULL,
  shift_trend = FALSE
)
}
\arguments{
\item{df}{Data frame of model data.}

\item{col}{Name of column to extrapolate/interpolate.}

\item{average_cols}{Column name(s) of column(s) for use in grouping data for averaging,
such as regions. If missing, uses global average of the data for infilling.}

\item{weight_col}{Column name of column of weights to be used in averaging, such
as country population.}

\item{flat_extrap}{Logical value determining whether or not to flat extrapolate
using the latest average for missing rows with no data available.}

\item{ret}{Character vector specifying what values the function returns. Defaults
to returning a data frame, but can return a vector of model error, the
model itself or a list with all 3 as components.}

\item{test_col}{Name of logical column specifying which response values to remove
for testing the model's predictive accuracy. If \code{NULL}, ignored. See \code{\link[=model_error]{model_error()}}
for details on the methods and metrics returned.}

\item{test_period}{Length of period to test for RMChE. If \code{NULL}, beginning and end
points of each group in \code{group_col} are compared. Otherwise, \code{test_period} must
be set to an integer \code{n} and for each group, comparisons are made between
the end point and \code{n} periods prior.}

\item{test_period_flex}{Logical value indicating if \code{test_period} is less than
the full length of the series, should change error still be calculated for that
point. Defaults to \code{FALSE}.}

\item{group_col}{Column name(s) of group(s) to use in \code{\link[dplyr:group_by]{dplyr::group_by()}} when
supplying type, calculating mean absolute scaled error on data involving
time series, and if \code{group_models}, then fitting and predicting models too.
If \code{NULL}, not used. Defaults to \code{"iso3"}.}

\item{obs_filter}{String value of the form "\verb{logical operator} \code{integer}"
that specifies the number of observations required to fit the model and
replace observations with predicted values. This is done in
conjunction with \code{group_col}. So, if \code{group_col = "iso3"} and
\code{obs_filter = ">= 5"}, then for this model, predictions will only be used
for \code{iso3} vales that have 5 or more observations. Possible logical operators
to use are \code{>}, \code{>=}, \code{<}, \code{<=}, \code{==}, and \code{!=}.\preformatted{If `group_models = FALSE`, then `obs_filter` is only used to determine when
predicted values replace observed values but **is not** used to restrict values
from being used in model fitting. If `group_models = TRUE`, then a model
is only fit for a group if they meet the `obs_filter` requirements. This provides
speed benefits, particularly when running INLA time series using `predict_inla()`.
}}

\item{sort_col}{Column name(s) to use to \code{\link[dplyr:arrange]{dplyr::arrange()}} the data prior to
supplying type and calculating mean absolute scaled error on data involving
time series. If \code{NULL}, not used. Defaults to \code{"year"}.}

\item{sort_descending}{Logical value on whether the sorted values from \code{sort_col}
should be sorted in descending order. Defaults to \code{FALSE}.}

\item{pred_col}{Column name to store predicted value.}

\item{type_col}{Column name specifying data type.}

\item{types}{Vector of length 3 that provides the type to provide to data
produced in the model. These values are only used to fill in type values
where the dependent variable is missing. The first value is given to missing
observations that precede the first observation, the second to those after
the last observation, and the third for those following the final observation.}

\item{source_col}{Column name containing source information for the data frame.
If provided, the argument in \code{source} is used to fill in where predictions
have filled in missing data.}

\item{source}{Source to add to missing values.}

\item{scenario_detail_col}{Column name containing scenario_detail information
for the data frame. If provided, the argument in \code{scenario_detail} is used
to fill in where prediction shave filled in missing data.}

\item{scenario_detail}{Scenario details to add to missing values (usually the
name of the model being used to generate the projection, optionally with
relevant parameters).}

\item{replace_obs}{Character value specifying how, if at all, observations should
be replaced by infilled values. By default, replaces missing values in \code{col}
but if set to \code{"none"} then \code{col} is not changed.}

\item{error_correct}{Logical value indicating whether or not whether mean error
should be used to adjust predicted values. If \code{TRUE}, the mean error between
observed and predicted data points will be used to adjust predictions. If
\code{error_correct_cols} is not \code{NULL}, mean error will be used within those
groups instead of overall mean error.}

\item{error_correct_cols}{Column names of data frame to group by when applying
error correction to the predicted values.}

\item{shift_trend}{Logical value specifying whether or not to shift predictions
so that the trend matches up to the last observation. If \code{error_correct} and
\code{shift_trend} are both \code{TRUE}, \code{shift_trend} takes precedence.}
}
\value{
Depending on the value passed to \code{ret}, either a data frame with
predicted data, a vector of errors from \code{\link[=model_error]{model_error()}}, a fitted model, or a list with all 3.
}
\description{
\code{predict_average()} does simple infilling and prediction using averages.
Similar to other predict functions, it also allows filling in of type and source
if necessary. However, it does not provide confidence bounds on the estimates,
like other \code{predict_...} model-based functions provide.
}
\details{
For each year where at least 1 data point is available, the average is calculated
as the prediction. If \code{flat_extrap}, then the latest average is flat extrapolated
to the end of the data. When using \code{test_col}, the average may not be available
for certain groups, so flat extrapolation will be relied on, meaning that the
\code{COR} metric output by errors is difficult to interpret or use properly.
}
