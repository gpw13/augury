% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/merge_prediction.R
\name{merge_prediction}
\alias{merge_prediction}
\title{Merge predicted data into data frame}
\usage{
merge_prediction(
  df,
  response,
  group_col,
  obs_filter,
  sort_col,
  sort_descending,
  pred_col,
  pred_upper_col,
  pred_lower_col,
  upper_col,
  lower_col,
  type_col,
  types,
  source_col,
  source,
  scenario_detail_col,
  scenario_detail,
  replace_obs
)
}
\arguments{
\item{df}{Data frame of model data.}

\item{response}{Column name of response variable.}

\item{group_col}{Column name(s) of group(s) to use in \code{\link[dplyr:group_by]{dplyr::group_by()}} when
supplying type, calculating mean absolute scaled error on data involving
time series, and if \code{group_models}, then fitting and predicting models too.
If \code{NULL}, not used. Defaults to \code{"iso3"}.}

\item{obs_filter}{String value of the form "\verb{logical operator} \code{integer}"
that specifies the number of observations required to fit the model and
replace observations with predicted values. This is done in
conjunction with \code{group_col}. So, if \code{group_col = "iso3"} and
\code{obs_filter = ">= 5"}, then for this model, predictions will only be used
for \code{iso3} vales that have 5 or more observations. Possible logical operators
to use are \code{>}, \code{>=}, \code{<}, \code{<=}, \code{==}, and \code{!=}.\preformatted{If `group_models = FALSE`, then `obs_filter` is only used to determine when
predicted values replace observed values but **is not** used to restrict values
from being used in model fitting. If `group_models = TRUE`, then a model
is only fit for a group if they meet the `obs_filter` requirements. This provides
speed benefits, particularly when running INLA time series using `predict_inla()`.
}}

\item{sort_col}{Column name(s) to use to \code{\link[dplyr:arrange]{dplyr::arrange()}} the data prior to
supplying type and calculating mean absolute scaled error on data involving
time series. If \code{NULL}, not used. Defaults to \code{"year"}.}

\item{sort_descending}{Logical value on whether the sorted values from \code{sort_col}
should be sorted in descending order. Defaults to \code{FALSE}.}

\item{pred_col}{Column name to store predicted value.}

\item{pred_upper_col}{Column name to store upper bound of confidence interval
generated by the \code{predict_...} function. This stores the full set of generated
values for the upper bound.}

\item{pred_lower_col}{Column name to store lower bound of confidence interval
generated by the \code{predict_...} function. This stores the full set of generated
values for the lower bound.}

\item{upper_col}{Column name that contains upper bound information, including
upper bound of the input data to the model. Values from \code{pred_upper_col}
are put into this column in the exact same way the response is filled by \code{pred}
based on \code{replace_na} (only when there is a missing value in the response).}

\item{lower_col}{Column name that contains lower bound information, including
lower bound of the input data to the model. Values from \code{pred_lower_col}
are put into this column in the exact same way the response is filled by \code{pred}
based on \code{replace_na} (only when there is a missing value in the response).}

\item{type_col}{Column name specifying data type.}

\item{types}{Vector of length 3 that provides the type to provide to data
produced in the model. These values are only used to fill in type values
where the dependent variable is missing. The first value is given to missing
observations that precede the first observation, the second to those after
the last observation, and the third for those following the final observation.}

\item{source_col}{Column name containing source information for the data frame.
If provided, the argument in \code{source} is used to fill in where predictions
have filled in missing data.}

\item{source}{Source to add to missing values.}

\item{scenario_detail_col}{Column name containing scenario_detail information
for the data frame. If provided, the argument in \code{scenario_detail} is used
to fill in where prediction shave filled in missing data.}

\item{scenario_detail}{Scenario details to add to missing values (usually the
name of the model being used to generate the projection, optionally with
relevant parameters).}

\item{replace_obs}{Character value specifying how, if at all, observations should
be replaced by fitted values. Defaults to replacing only missing values,
but can be used to replace all values or none.}
}
\value{
A data frame.
}
\description{
Merges predicted data into data frame. By default, does not replace observed
values with modeled data.
}
