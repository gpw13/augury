[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2020 Seth Caldwell  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. augury Copyright (C) 2020 Seth Caldwell This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/inla-modeling.html","id":"time-series-modeling","dir":"Articles","previous_headings":"","what":"Time series modeling","title":"INLA modeling","text":"first indicator safe sanitation. also use billionaiRe package quickly transform GHO data simple format used augury, billionaiRe, packages. Now input data available GHO easy use format, can now join covariates_df available augury run time series model predict sanitation 2023. simplicity, let’s just look Albania, ISO3 code \"ALB\". course, “covariate” used time series model going year_n, rest available want expand test types modeling. Let’s run modeling now. going scale data probit transform modeling. use predict_inla_ts() fit time series model data. go, now fit time series model data, provided new type source, merged existing data frame. However, setup, error calculations returned predict_inla_ts() calculated probit space. wanted scale probit transform response variable prior model fitting, still calculate error metrics automatically return response predicted values back original space, can set scale = 100 probit = TRUE within predict_inla_ts(). can see results manually scaling probit transforming variables.","code":"library(augury)  df <- ghost::gho_data(\"WSH_SANITATION_SAFELY_MANAGED\",                       query = \"$filter=Dim1 eq 'TOTL'\") %>%   billionaiRe::wrangle_gho_data(source = \"WHO GHO\",                                 type = \"estimated\")  head(df) #> # A tibble: 6 × 13 #>   iso3   year ind   value lower upper use_dash use_calc source type  type_detail #>   <chr> <int> <chr> <dbl> <dbl> <dbl> <lgl>    <lgl>    <chr>  <chr> <chr>       #> 1 AFG    2000 hpop…    NA    NA    NA TRUE     TRUE     WHO G… esti… NA          #> 2 AFG    2001 hpop…    NA    NA    NA TRUE     TRUE     WHO G… esti… NA          #> 3 AFG    2002 hpop…    NA    NA    NA TRUE     TRUE     WHO G… esti… NA          #> 4 AFG    2003 hpop…    NA    NA    NA TRUE     TRUE     WHO G… esti… NA          #> 5 AFG    2004 hpop…    NA    NA    NA TRUE     TRUE     WHO G… esti… NA          #> 6 AFG    2005 hpop…    NA    NA    NA TRUE     TRUE     WHO G… esti… NA          #> # … with 2 more variables: other_detail <chr>, upload_detail <chr> library(dplyr)  df <- left_join(covariates_df,                 df,                 by = c(\"iso3\", \"year\")) %>%   filter(iso3 == \"ALB\")  head(df) #> # A tibble: 6 × 22 #>   iso3   year year_n region       un_subregion gbd_subregion sdg_subregion   sdi #>   <chr> <int>  <dbl> <chr>        <chr>                <dbl> <chr>         <dbl> #> 1 ALB    2000      1 Southern Eu… 39                      42 917           0.604 #> 2 ALB    2001      2 Southern Eu… 39                      42 917           0.61  #> 3 ALB    2002      3 Southern Eu… 39                      42 917           0.614 #> 4 ALB    2003      4 Southern Eu… 39                      42 917           0.619 #> 5 ALB    2004      5 Southern Eu… 39                      42 917           0.625 #> 6 ALB    2005      6 Southern Eu… 39                      42 917           0.632 #> # … with 14 more variables: sdi_scaled <dbl>, e0 <dbl>, e0_scaled <dbl>, #> #   ind <chr>, value <dbl>, lower <dbl>, upper <dbl>, use_dash <lgl>, #> #   use_calc <lgl>, source <chr>, type <chr>, type_detail <chr>, #> #   other_detail <chr>, upload_detail <chr> modeled_df <- df %>%   scale_transform(\"value\") %>%   probit_transform(\"value\") %>%   predict_inla_ts(type_col = \"type\",                   source_col = \"source\",                   source = \"augury modeling\") %>%   probit_transform(c(\"value\", \"pred\", \"upper\", \"lower\"), inverse = TRUE) %>%   scale_transform(c(\"value\", \"pred\", \"upper\", \"lower\"), divide = FALSE)  # Only look at recent years and relevant columns  modeled_df %>%   filter(year > 2015) %>%   select(iso3, year, value, pred, lower, upper, source, type) #> # A tibble: 10 × 8 #>    iso3   year value  pred lower upper source          type      #>    <chr> <int> <dbl> <dbl> <dbl> <dbl> <chr>           <chr>     #>  1 ALB    2016  46.7  46.7    NA    NA WHO GHO         estimated #>  2 ALB    2017  47.1  47.0    NA    NA WHO GHO         estimated #>  3 ALB    2018  47.4  47.4    NA    NA WHO GHO         estimated #>  4 ALB    2019  47.6  47.6    NA    NA WHO GHO         estimated #>  5 ALB    2020  47.7  47.7    NA    NA WHO GHO         estimated #>  6 ALB    2021  47.9  47.9    NA    NA augury modeling projected #>  7 ALB    2022  48.1  48.1    NA    NA augury modeling projected #>  8 ALB    2023  48.3  48.3    NA    NA augury modeling projected #>  9 ALB    2024  48.5  48.5    NA    NA augury modeling projected #> 10 ALB    2025  48.6  48.6    NA    NA augury modeling projected df %>%   predict_inla_ts(scale = 100,                   probit = TRUE,                   type_col = \"type\",                   source_col = \"source\",                   source = \"augury modeling\") %>%   filter(year > 2015) %>%   select(iso3, year, value, pred, lower, upper, source, type) #> # A tibble: 10 × 8 #>    iso3   year value  pred lower upper source          type      #>    <chr> <int> <dbl> <dbl> <dbl> <dbl> <chr>           <chr>     #>  1 ALB    2016  46.7  46.7    NA    NA WHO GHO         estimated #>  2 ALB    2017  47.1  47.0    NA    NA WHO GHO         estimated #>  3 ALB    2018  47.4  47.4    NA    NA WHO GHO         estimated #>  4 ALB    2019  47.6  47.6    NA    NA WHO GHO         estimated #>  5 ALB    2020  47.7  47.7    NA    NA WHO GHO         estimated #>  6 ALB    2021  47.9  47.9    NA    NA augury modeling projected #>  7 ALB    2022  48.1  48.1    NA    NA augury modeling projected #>  8 ALB    2023  48.3  48.3    NA    NA augury modeling projected #>  9 ALB    2024  48.5  48.5    NA    NA augury modeling projected #> 10 ALB    2025  48.6  48.6    NA    NA augury modeling projected"},{"path":"/articles/inla-modeling.html","id":"mixed-effects-modeling","dir":"Articles","previous_headings":"","what":"Mixed-effects modeling","title":"INLA modeling","text":"Now look another indicator, composite 13 International Health Regulations core capacity scores, SPAR version. Since countries two data points , use mixed-effects modeling infill project data. , let’s go straight modeling like last time, except now use predict_inla_me() mixed-effects modeling using covariates found covariates_df. time, want model first order auto-regressive process across time rather second-order random walk, use \"ar1\" model available INLA. exactly able time series modeling, now infilled missing data indicator using mixed-effects modeling INLA.","code":"df <- ghost::gho_data(\"SDGIHR2018\") %>%   billionaiRe::wrangle_gho_data(source = \"Electronic State Parties Self-Assessment Annual Reporting Tool (e-SPAR)\",                                 type = \"reported\")  head(df) #> # A tibble: 6 × 13 #>   iso3   year ind   value lower upper use_dash use_calc source type  type_detail #>   <chr> <int> <chr> <dbl> <dbl> <dbl> <lgl>    <lgl>    <chr>  <chr> <chr>       #> 1 AFG    2018 espar    35    NA    NA TRUE     TRUE     Elect… repo… NA          #> 2 AFG    2019 espar    43    NA    NA TRUE     TRUE     Elect… repo… NA          #> 3 AFG    2020 espar    47    NA    NA TRUE     TRUE     Elect… repo… NA          #> 4 AGO    2018 espar    59    NA    NA TRUE     TRUE     Elect… repo… NA          #> 5 AGO    2019 espar    63    NA    NA TRUE     TRUE     Elect… repo… NA          #> 6 AGO    2020 espar    65    NA    NA TRUE     TRUE     Elect… repo… NA          #> # … with 2 more variables: other_detail <chr>, upload_detail <chr> modeled_df <- df %>%   right_join(covariates_df, by = c(\"iso3\", \"year\")) %>%   scale_transform(\"value\") %>%   probit_transform(\"value\") %>%   predict_inla_me(model = \"ar1\",                   type_col = \"type\",                   source_col = \"source\",                   source = \"WHO DDI Preliminary infilling and projections\") %>%   probit_transform(c(\"value\", \"pred\", \"upper\", \"lower\"), inverse = TRUE) %>%   scale_transform(c(\"value\", \"pred\", \"upper\", \"lower\"), divide = FALSE)  # Look at an example for Afghanistan  modeled_df %>%   filter(year > 2017, iso3 == \"AFG\") %>%   select(iso3, year, value, pred, lower, upper, source, type) #> # A tibble: 8 × 8 #>   iso3   year value  pred lower upper source                               type  #>   <chr> <int> <dbl> <dbl> <dbl> <dbl> <chr>                                <chr> #> 1 AFG    2018  35    40.6    NA    NA Electronic State Parties Self-Asses… repo… #> 2 AFG    2019  43    41.5    NA    NA Electronic State Parties Self-Asses… repo… #> 3 AFG    2020  47    42.7    NA    NA Electronic State Parties Self-Asses… repo… #> 4 AFG    2021  43.5  43.5    NA    NA WHO DDI Preliminary infilling and p… proj… #> 5 AFG    2022  44.5  44.5    NA    NA WHO DDI Preliminary infilling and p… proj… #> 6 AFG    2023  45.4  45.4    NA    NA WHO DDI Preliminary infilling and p… proj… #> 7 AFG    2024  46.4  46.4    NA    NA WHO DDI Preliminary infilling and p… proj… #> 8 AFG    2025  47.3  47.3    NA    NA WHO DDI Preliminary infilling and p… proj…"},{"path":"/articles/inla-modeling.html","id":"building-further","dir":"Articles","previous_headings":"","what":"Building further","title":"INLA modeling","text":"Building work, can tweak arguments passed INLA models use base predict_inla() covariates test compare models. much functionality test modeling accuracy iteratively develop methods available package shown , please continue explore play around.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Seth Caldwell. Author, maintainer. William Msemburi. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Caldwell S, Msemburi W (2022). augury: Provides Streamlined Methods Data Imputation Forecasting DDI Statistics. R package version 0.3.3, https://github.com/gpw13/augury.","code":"@Manual{,   title = {augury: Provides Streamlined Methods for Data Imputation and Forecasting for WHO DDI Statistics},   author = {Seth Caldwell and William Msemburi},   year = {2022},   note = {R package version 0.3.3},   url = {https://github.com/gpw13/augury}, }"},{"path":"/index.html","id":"augury-","dir":"","previous_headings":"","what":"Provides Streamlined Methods for Data Imputation and Forecasting for WHO DDI Statistics","title":"Provides Streamlined Methods for Data Imputation and Forecasting for WHO DDI Statistics","text":"goal augury streamline process fitting models infill forecast data, particularly models used within ’s Triple Billion framework.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Provides Streamlined Methods for Data Imputation and Forecasting for WHO DDI Statistics","text":"can install augury GitHub. package depends INLA package available CRAN. need separately install prior installing augury, following code .","code":"if (!require(\"INLA\")) install.packages(\"INLA\",repos=c(getOption(\"repos\"),INLA=\"https://inla.r-inla-download.org/R/stable\"), dep=TRUE) remotes::install_github(\"gpw13/augury\")"},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Provides Streamlined Methods for Data Imputation and Forecasting for WHO DDI Statistics","text":"functions available package designed streamline fitting model replacing missing observations within single data frame one pass. predict_general_mdl() function takes data frame, generic R modelling function (stats::lm), fits model returns newly projected data, error metrics, fitted model , list 3. predict_inla() function similar , except rather taking generic modelling function accepts formula additional argument passed INLA::inla() perform Bayesian analysis structured additive models. predict_forecast() instead uses forecasting methods available forecast::forecast() perform exponential smoothing time series models response variable. Given models might need fit separately different portions data frame, fitting time series models country individually, functions now accept argument group_models determines whether fit separate models group data frame joining back together original data frame.","code":""},{"path":"/index.html","id":"additional-model-wrappers","dir":"","previous_headings":"","what":"Additional model wrappers","title":"Provides Streamlined Methods for Data Imputation and Forecasting for WHO DDI Statistics","text":"Additional functions provided requested streamlining fitting specific models. general modeling, grouped individual functions stats::lm(), stats::glm(), lme4::lmer() fit linear models, generalized linear models, linear mixed-effects models respectively. wrappers : predict_lm() predict_glm() predict_lmer() well, wrappers provided around INLA models currently place Triple Billion framework. time series model additional covariates (fit individually country) mixed-effects model using covariates. predict_inla_me() predict_inla_ts() forecasting, generic functions provided simple exponential smoothing Holt’s linear trend exponential smoothing. predict_holt() predict_ses()","code":""},{"path":"/index.html","id":"covariates","dir":"","previous_headings":"","what":"Covariates","title":"Provides Streamlined Methods for Data Imputation and Forecasting for WHO DDI Statistics","text":"convenience, covariates used within default INLA modeling exported package can easily joined data frame use modeling. available augury::covariates_df.","code":""},{"path":"/index.html","id":"grouped-trend-development","dir":"","previous_headings":"","what":"Grouped trend development","title":"Provides Streamlined Methods for Data Imputation and Forecasting for WHO DDI Statistics","text":"typically want fit model data set directly, augury set predict_..._avg_trend() functions allows average data group (e.g. region), fit model grouped averaged data, extract trend apply original dataset. See section Average trend modeling details.","code":""},{"path":"/index.html","id":"error-metrics","dir":"","previous_headings":"","what":"Error metrics","title":"Provides Streamlined Methods for Data Imputation and Forecasting for WHO DDI Statistics","text":"model selection, always important use metrics evaluate model fit predictive accuracy. predict_... functions augury use evaluation framework, implemented model_error(). test column defined, evaluation framework applied set","code":""},{"path":"/index.html","id":"additional-functionality","dir":"","previous_headings":"","what":"Additional functionality","title":"Provides Streamlined Methods for Data Imputation and Forecasting for WHO DDI Statistics","text":"help streamline portions modeling process, functions included package. probit_transform() uses probit transformation select columns data frame, inverses specified. scale_transform() scales vector single number, simple, can inverse scaling specified. predict_simple() performs linear interpolation flat extrapolation manner predict_... functions, without modeling confidence bounds. predict_average() performs averaging groups columns manner predict_... functions, without modeling confidence bounds. Together, can used transform scale data better modeling, inverse get data back original feature space.","code":""},{"path":"/index.html","id":"inla-modeling-examples","dir":"","previous_headings":"","what":"INLA modeling examples","title":"Provides Streamlined Methods for Data Imputation and Forecasting for WHO DDI Statistics","text":"order show INLA modeling wrappers provided augury, look two datasets publicly available World Health Organization’s Global Health Observatory. can accessed using ghost package, provides R interface GHO OData API.","code":""},{"path":"/index.html","id":"time-series-modeling","dir":"","previous_headings":"","what":"Time series modeling","title":"Provides Streamlined Methods for Data Imputation and Forecasting for WHO DDI Statistics","text":"first indicator safe sanitation. also use billionaiRe package quickly transform GHO data simple format used augury, billionaiRe, packages. Now input data available GHO easy use format, can now join covariates_df available augury run time series model predict sanitation 2023. simplicity, let’s just look Albania, ISO3 code \"ALB\". course, “covariate” used time series model going year_n, rest available want expand test types modeling. Let’s run modeling now. going scale data probit transform modeling. use predict_inla_ts() fit time series model data. go, now fit time series model data, provided new type source, merged existing data frame. However, setup, error calculations returned predict_inla_ts() calculated probit space. wanted scale probit transform response variable prior model fitting, still calculate error metrics automatically return response predicted values back original space, can set scale = 100 probit = TRUE within predict_inla_ts(). can see results manually scaling probit transforming variables.","code":"library(augury)  df <- ghost::gho_data(\"WSH_SANITATION_SAFELY_MANAGED\",                       query = \"$filter=Dim1 eq 'TOTL'\") %>%   billionaiRe::wrangle_gho_data(source = \"WHO GHO\",                                 type = \"estimated\")  head(df) #> # A tibble: 6 × 13 #>   iso3   year ind   value lower upper use_dash use_calc source type  type_detail #>   <chr> <int> <chr> <dbl> <lgl> <lgl> <lgl>    <lgl>    <chr>  <chr> <lgl>       #> 1 AFG    2000 hpop…    NA NA    NA    TRUE     TRUE     WHO G… esti… NA          #> 2 AFG    2001 hpop…    NA NA    NA    TRUE     TRUE     WHO G… esti… NA          #> 3 AFG    2002 hpop…    NA NA    NA    TRUE     TRUE     WHO G… esti… NA          #> 4 AFG    2003 hpop…    NA NA    NA    TRUE     TRUE     WHO G… esti… NA          #> 5 AFG    2004 hpop…    NA NA    NA    TRUE     TRUE     WHO G… esti… NA          #> 6 AFG    2005 hpop…    NA NA    NA    TRUE     TRUE     WHO G… esti… NA          #> # … with 2 more variables: other_detail <lgl>, upload_detail <lgl> library(dplyr)  df <- left_join(covariates_df,                 df,                 by = c(\"iso3\", \"year\")) %>%   filter(iso3 == \"ALB\")  head(df) #> # A tibble: 6 × 19 #>   iso3   year year_n region    sdi sdi_scaled    e0 e0_scaled ind    value lower #>   <chr> <int>  <dbl> <chr>   <dbl>      <dbl> <dbl>     <dbl> <chr>  <dbl> <lgl> #> 1 ALB    2000      1 Southe… 0.604      0.650  74.0     0.752 hpop_…  40.2 NA    #> 2 ALB    2001      2 Southe… 0.61       0.657  74.3     0.759 hpop_…  40.5 NA    #> 3 ALB    2002      3 Southe… 0.614      0.661  74.6     0.766 hpop_…  40.8 NA    #> 4 ALB    2003      4 Southe… 0.619      0.667  74.8     0.771 hpop_…  41.1 NA    #> 5 ALB    2004      5 Southe… 0.625      0.673  75.0     0.776 hpop_…  41.4 NA    #> 6 ALB    2005      6 Southe… 0.632      0.681  75.2     0.780 hpop_…  41.9 NA    #> # … with 8 more variables: upper <lgl>, use_dash <lgl>, use_calc <lgl>, #> #   source <chr>, type <chr>, type_detail <lgl>, other_detail <lgl>, #> #   upload_detail <lgl> modeled_df <- df %>%   scale_transform(\"value\") %>%   probit_transform(\"value\") %>%   predict_inla_ts(type_col = \"type\",                   source_col = \"source\",                   source = \"augury modeling\") %>%   probit_transform(c(\"value\", \"pred\", \"upper\", \"lower\"), inverse = TRUE) %>%   scale_transform(c(\"value\", \"pred\", \"upper\", \"lower\"), divide = FALSE)  # Only look at recent years and relevant columns  modeled_df %>%   filter(year > 2015) %>%   select(iso3, year, value, pred, lower, upper, source, type) #> # A tibble: 10 × 8 #>    iso3   year value  pred lower upper source          type      #>    <chr> <int> <dbl> <dbl> <dbl> <dbl> <chr>           <chr>     #>  1 ALB    2016  46.7  46.7    NA    NA WHO GHO         estimated #>  2 ALB    2017  47.1  47.1    NA    NA WHO GHO         estimated #>  3 ALB    2018  47.4  47.4    NA    NA WHO GHO         estimated #>  4 ALB    2019  47.6  47.6    NA    NA WHO GHO         estimated #>  5 ALB    2020  47.7  47.7    NA    NA WHO GHO         estimated #>  6 ALB    2021  47.9  47.9    NA    NA augury modeling projected #>  7 ALB    2022  48.1  48.1    NA    NA augury modeling projected #>  8 ALB    2023  48.2  48.2    NA    NA augury modeling projected #>  9 ALB    2024  48.4  48.4    NA    NA augury modeling projected #> 10 ALB    2025  48.6  48.6    NA    NA augury modeling projected df %>%   predict_inla_ts(scale = 100,                   probit = TRUE,                   type_col = \"type\",                   source_col = \"source\",                   source = \"augury modeling\") %>%   filter(year > 2015) %>%   select(iso3, year, value, pred, lower, upper, source, type) #> # A tibble: 10 × 8 #>    iso3   year value  pred lower upper source          type      #>    <chr> <int> <dbl> <dbl> <dbl> <dbl> <chr>           <chr>     #>  1 ALB    2016  46.7  46.7    NA    NA WHO GHO         estimated #>  2 ALB    2017  47.1  47.1    NA    NA WHO GHO         estimated #>  3 ALB    2018  47.4  47.4    NA    NA WHO GHO         estimated #>  4 ALB    2019  47.6  47.6    NA    NA WHO GHO         estimated #>  5 ALB    2020  47.7  47.7    NA    NA WHO GHO         estimated #>  6 ALB    2021  47.9  47.9    NA    NA augury modeling projected #>  7 ALB    2022  48.1  48.1    NA    NA augury modeling projected #>  8 ALB    2023  48.2  48.2    NA    NA augury modeling projected #>  9 ALB    2024  48.4  48.4    NA    NA augury modeling projected #> 10 ALB    2025  48.6  48.6    NA    NA augury modeling projected"},{"path":"/index.html","id":"mixed-effects-modeling","dir":"","previous_headings":"","what":"Mixed-effects modeling","title":"Provides Streamlined Methods for Data Imputation and Forecasting for WHO DDI Statistics","text":"Now look another indicator, composite 13 International Health Regulations core capacity scores, SPAR version. Since countries two data points , use mixed-effects modeling infill project data. , let’s go straight modeling like last time, except now use predict_inla_me() mixed-effects modeling using covariates found covariates_df. time, want model first order auto-regressive process across time rather second-order random walk, use \"ar1\" model available INLA. exactly able time series modeling, now infilled missing data indicator using mixed-effects modeling INLA.","code":"df <- ghost::gho_data(\"SDGIHR2018\") %>%   billionaiRe::wrangle_gho_data(source = \"Electronic State Parties Self-Assessment Annual Reporting Tool (e-SPAR)\",                                 type = \"reported\")  head(df) #> # A tibble: 6 × 13 #>   iso3   year ind   value lower upper use_dash use_calc source type  type_detail #>   <chr> <int> <chr> <dbl> <lgl> <lgl> <lgl>    <lgl>    <chr>  <chr> <lgl>       #> 1 AFG    2018 espar    35 NA    NA    TRUE     TRUE     Elect… repo… NA          #> 2 AFG    2019 espar    43 NA    NA    TRUE     TRUE     Elect… repo… NA          #> 3 AFG    2020 espar    47 NA    NA    TRUE     TRUE     Elect… repo… NA          #> 4 AGO    2018 espar    59 NA    NA    TRUE     TRUE     Elect… repo… NA          #> 5 AGO    2019 espar    63 NA    NA    TRUE     TRUE     Elect… repo… NA          #> 6 AGO    2020 espar    65 NA    NA    TRUE     TRUE     Elect… repo… NA          #> # … with 2 more variables: other_detail <lgl>, upload_detail <lgl> modeled_df <- df %>%   right_join(covariates_df, by = c(\"iso3\", \"year\")) %>%   scale_transform(\"value\") %>%   probit_transform(\"value\") %>%   predict_inla_me(model = \"ar1\",                   type_col = \"type\",                   source_col = \"source\",                   source = \"WHO DDI Preliminary infilling and projections\") %>%   probit_transform(c(\"value\", \"pred\", \"upper\", \"lower\"), inverse = TRUE) %>%   scale_transform(c(\"value\", \"pred\", \"upper\", \"lower\"), divide = FALSE)  # Look at an example for Afghanistan  modeled_df %>%   filter(year > 2017, iso3 == \"AFG\") %>%   select(iso3, year, value, pred, lower, upper, source, type) #> # A tibble: 8 × 8 #>   iso3   year value  pred lower upper source                              type   #>   <chr> <int> <dbl> <dbl> <dbl> <dbl> <chr>                               <chr>  #> 1 AFG    2018  35    40.6    NA    NA Electronic State Parties Self-Asse… repor… #> 2 AFG    2019  43    41.5    NA    NA Electronic State Parties Self-Asse… repor… #> 3 AFG    2020  47    42.7    NA    NA Electronic State Parties Self-Asse… repor… #> 4 AFG    2021  43.5  43.5    NA    NA WHO DDI Preliminary infilling and … proje… #> 5 AFG    2022  44.5  44.5    NA    NA WHO DDI Preliminary infilling and … proje… #> 6 AFG    2023  45.4  45.4    NA    NA WHO DDI Preliminary infilling and … proje… #> 7 AFG    2024  46.4  46.4    NA    NA WHO DDI Preliminary infilling and … proje… #> 8 AFG    2025  47.3  47.3    NA    NA WHO DDI Preliminary infilling and … proje…"},{"path":"/index.html","id":"building-further","dir":"","previous_headings":"","what":"Building further","title":"Provides Streamlined Methods for Data Imputation and Forecasting for WHO DDI Statistics","text":"Building work, can tweak arguments passed INLA models use base predict_inla() covariates test compare models. much functionality test modeling accuracy iteratively develop methods available package shown , please continue explore play around.","code":""},{"path":"/index.html","id":"forecasting-examples","dir":"","previous_headings":"","what":"Forecasting examples","title":"Provides Streamlined Methods for Data Imputation and Forecasting for WHO DDI Statistics","text":"look using forecast methods predict data, using ghost package, provides R interface GHO OData API accessing data blood pressure. load data USA Great Britain initially, provide full time series 1975 2015. data, can now use predict_forecast() function like predict_... functions augury forecast 2017. First, just USA data use forecast::holt forecast using exponential smoothing. course, might want run models together country individually. case, can use group_models = TRUE function perform forecast individually country. save bit limited time, let’s use wrapper predict_holt() automatically supply forecast::holt forecasting function. Et voila, results USA also ran forecasting Great Britain well. However, careful data supplied forecasting. forecast package functions default using longest, contiguous non-missing data forecasting. augury instead automatically pulls latest contiguous observed data use forecasting, ensure older data prioritized new data. However, means break time series prevent data used. ’s advisable consider data infilling imputation methods used generate full time series prior use forecasting methods prevent issues like impacting predictive accuracy.","code":"library(augury)  df <- ghost::gho_data(\"BP_04\", query = \"$filter=SpatialDim in ('USA', 'GBR') and Dim1 eq 'MLE' and Dim2 eq 'YEARS18-PLUS'\") %>%   billionaiRe::wrangle_gho_data() %>%   dplyr::right_join(tidyr::expand_grid(iso3 = c(\"USA\", \"GBR\"),                                        year = 1975:2017)) #> Warning: Some of the rows are missing a source value. #> Joining, by = c(\"iso3\", \"year\")  head(df) #> # A tibble: 6 × 13 #>   iso3   year ind   value lower upper use_dash use_calc source type  type_detail #>   <chr> <int> <chr> <dbl> <dbl> <dbl> <lgl>    <lgl>    <lgl>  <chr> <lgl>       #> 1 GBR    1975 bp     37.8  26.7  49.1 TRUE     TRUE     NA     <NA>  NA          #> 2 GBR    1976 bp     37.6  27.4  48   TRUE     TRUE     NA     <NA>  NA          #> 3 GBR    1977 bp     37.3  27.9  46.8 TRUE     TRUE     NA     <NA>  NA          #> 4 GBR    1978 bp     37.1  28.4  45.9 TRUE     TRUE     NA     <NA>  NA          #> 5 GBR    1979 bp     36.9  28.8  45.2 TRUE     TRUE     NA     <NA>  NA          #> 6 GBR    1980 bp     36.7  29.2  44.4 TRUE     TRUE     NA     <NA>  NA          #> # … with 2 more variables: other_detail <lgl>, upload_detail <lgl> usa_df <- dplyr::filter(df, iso3 == \"USA\")  predict_forecast(usa_df,                  forecast::holt,                  \"value\",                  sort_col = \"year\") %>%   dplyr::filter(year >= 2012) #> Registered S3 method overwritten by 'quantmod': #>   method            from #>   as.zoo.data.frame zoo #> # A tibble: 6 × 16 #>   iso3   year ind   value lower upper use_dash use_calc source type  type_detail #>   <chr> <int> <chr> <dbl> <dbl> <dbl> <lgl>    <lgl>    <lgl>  <chr> <lgl>       #> 1 USA    2012 bp     15.7  11.7  20.3 TRUE     TRUE     NA     <NA>  NA          #> 2 USA    2013 bp     15.5  11.2  20.8 TRUE     TRUE     NA     <NA>  NA          #> 3 USA    2014 bp     15.4  10.8  21.3 TRUE     TRUE     NA     <NA>  NA          #> 4 USA    2015 bp     15.3  10.4  21.8 TRUE     TRUE     NA     <NA>  NA          #> 5 USA    2016 <NA>   15.2  NA    NA   NA       NA       NA     <NA>  NA          #> 6 USA    2017 <NA>   15.1  NA    NA   NA       NA       NA     <NA>  NA          #> # … with 5 more variables: other_detail <lgl>, upload_detail <lgl>, pred <dbl>, #> #   pred_upper <dbl>, pred_lower <dbl> predict_holt(df,              response = \"value\",              group_col = \"iso3\",              group_models = TRUE,              sort_col = \"year\") %>%   dplyr::filter(year >= 2014, year <= 2017) #> # A tibble: 8 × 16 #>   iso3   year ind   value lower upper use_dash use_calc source type  type_detail #>   <chr> <int> <chr> <dbl> <dbl> <dbl> <lgl>    <lgl>    <lgl>  <chr> <lgl>       #> 1 GBR    2014 bp     18.5  14    23.3 TRUE     TRUE     NA     <NA>  NA          #> 2 GBR    2015 bp     17.9  13    23.2 TRUE     TRUE     NA     <NA>  NA          #> 3 GBR    2016 <NA>   17.3  NA    NA   NA       NA       NA     <NA>  NA          #> 4 GBR    2017 <NA>   16.7  NA    NA   NA       NA       NA     <NA>  NA          #> 5 USA    2014 bp     15.4  10.8  21.3 TRUE     TRUE     NA     <NA>  NA          #> 6 USA    2015 bp     15.3  10.4  21.8 TRUE     TRUE     NA     <NA>  NA          #> 7 USA    2016 <NA>   15.2  NA    NA   NA       NA       NA     <NA>  NA          #> 8 USA    2017 <NA>   15.1  NA    NA   NA       NA       NA     <NA>  NA          #> # … with 5 more variables: other_detail <lgl>, upload_detail <lgl>, pred <dbl>, #> #   pred_upper <dbl>, pred_lower <dbl> bad_df <- dplyr::tibble(x = c(1:4, NA, 3:2, rep(NA, 4)))  predict_holt(bad_df, \"x\", group_col = NULL, sort_col = NULL, group_models = FALSE) #> # A tibble: 11 × 6 #>         x   pred pred_upper pred_lower upper lower #>     <dbl>  <dbl>      <dbl>      <dbl> <dbl> <dbl> #>  1  1     NA          NA        NA        NA    NA #>  2  2     NA          NA        NA        NA    NA #>  3  3     NA          NA        NA        NA    NA #>  4  4     NA          NA        NA        NA    NA #>  5 NA     NA          NA        NA        NA    NA #>  6  3     NA          NA        NA        NA    NA #>  7  2     NA          NA        NA        NA    NA #>  8  1.17   1.17        2.55     -0.217    NA    NA #>  9  0.338  0.338       2.33     -1.66     NA    NA #> 10 -0.494 -0.494       2.14     -3.12     NA    NA #> 11 -1.32  -1.32        1.98     -4.63     NA    NA"},{"path":"/index.html","id":"simple-prediction-methods","dir":"","previous_headings":"","what":"Simple prediction methods","title":"Provides Streamlined Methods for Data Imputation and Forecasting for WHO DDI Statistics","text":"simple methods available augury easy use, provide functionality allowing test column returning error metrics complex modeling functions available package. Let’s use data alcohol GHO demonstrate functionality. can see data time series gaps years. can use linear interpolation flat extrapolation get data 2023. Let’s now use linear interpolation flat extrapolation data. can see linear interpolation . can also see flat extrapolation. can use predict_average() function much way, except useful robust series set countries, data others. can use something like regional average infill data missing countries. , 4 missing member states, Lebanon, Cuba, Bulgaria, Libya. Let’s use regional averaging fill data. can use recent World Bank income groups whoville package relevant group. Hope examples clear highlight usefulness simple modelling functions.","code":"library(augury)  df <- ghost::gho_data(\"SA_0000001688\",                       query = \"$filter=Dim1 eq 'BTSX'\") %>%   billionaiRe::wrangle_gho_data(source = \"WHO GHO\",                                 type = \"estimated\") %>%   dplyr::arrange(iso3, year)  head(df) #> # A tibble: 6 × 13 #>   iso3   year ind     value lower upper use_dash use_calc source  type  type_detail #>   <chr> <int> <chr>   <dbl> <dbl> <dbl> <lgl>    <lgl>    <chr>   <chr> <lgl>       #> 1 AFG    2000 alcohol   0     0     0.1 TRUE     TRUE     WHO GHO esti… NA          #> 2 AFG    2005 alcohol   0     0     0.1 TRUE     TRUE     WHO GHO esti… NA          #> 3 AFG    2010 alcohol   0     0     0.1 TRUE     TRUE     WHO GHO esti… NA          #> 4 AFG    2015 alcohol   0     0     0   TRUE     TRUE     WHO GHO esti… NA          #> 5 AFG    2019 alcohol   0     0     0.1 TRUE     TRUE     WHO GHO esti… NA          #> 6 AGO    2000 alcohol   3.3   2.4   4.4 TRUE     TRUE     WHO GHO esti… NA          #> # … with 2 more variables: other_detail <lgl>, upload_detail <lgl> df <- tidyr::expand_grid(iso3 = unique(df$iso3),                          year = 2000:2023) %>%   dplyr::left_join(df, by = c(\"iso3\", \"year\"))  df %>%   dplyr::filter(iso3 == \"AFG\",                 year >= 2010,                 year <= 2018) %>%   dplyr::select(iso3,                 year,                 value) #> # A tibble: 9 × 3 #>   iso3   year value #>   <chr> <int> <dbl> #> 1 AFG    2010     0 #> 2 AFG    2011    NA #> 3 AFG    2012    NA #> 4 AFG    2013    NA #> 5 AFG    2014    NA #> 6 AFG    2015     0 #> 7 AFG    2016    NA #> 8 AFG    2017    NA #> 9 AFG    2018    NA pred_df <- predict_simple(df,                           group_col = \"iso3\",                           sort_col = \"year\")   pred_df %>%   dplyr::filter(iso3 == \"AFG\",                 year >= 2010,                 year <= 2018) %>%   dplyr::select(iso3, year, value) #> # A tibble: 9 × 3 #>   iso3   year value #>   <chr> <int> <dbl> #> 1 AFG    2010     0 #> 2 AFG    2011     0 #> 3 AFG    2012     0 #> 4 AFG    2013     0 #> 5 AFG    2014     0 #> 6 AFG    2015     0 #> 7 AFG    2016     0 #> 8 AFG    2017     0 #> 9 AFG    2018     0 pred_df %>%   dplyr::filter(iso3 == \"AFG\",                 year > 2016) %>%   dplyr::select(iso3, year, value) #> # A tibble: 7 × 3 #>   iso3   year value #>   <chr> <int> <dbl> #> 1 AFG    2017     0 #> 2 AFG    2018     0 #> 3 AFG    2019     0 #> 4 AFG    2020     0 #> 5 AFG    2021     0 #> 6 AFG    2022     0 #> 7 AFG    2023     0 df <- ghost::gho_data(\"PHE_HHAIR_PROP_POP_CLEAN_FUELS\") %>%   billionaiRe::wrangle_gho_data(source = \"WHO GHO\",                                 type = \"estimated\") %>%   dplyr::filter(whoville::is_who_member(iso3)) #> Warning: Some of the rows are missing a ind value.  x <- whoville::who_member_states() x[!(x %in% df$iso3)] #> [1] \"LBN\" \"CUB\" \"BGR\" \"LBY\" df <- tidyr::expand_grid(iso3 = x,                          year = 2000:2018) %>%   dplyr::left_join(df, by = c(\"iso3\", \"year\")) %>%   dplyr::mutate(region = whoville::iso3_to_regions(iso3, region = \"wb_ig\"))  predict_average(df,                 average_cols = c(\"region\", \"year\"),                 group_col = \"iso3\",                 sort_col = \"year\",                 type_col = \"type\",                 source_col = \"source\",                 source = \"WB IG regional averages\") %>%   dplyr::filter(iso3 == \"LBN\") #> # A tibble: 19 × 15 #>    iso3   year ind   value lower upper use_dash use_calc source           type   #>    <chr> <int> <chr> <dbl> <dbl> <dbl> <lgl>    <lgl>    <chr>            <chr>  #>  1 LBN    2000 <NA>   67.2    NA    NA NA       NA       WB IG regional … imput… #>  2 LBN    2001 <NA>   68.2    NA    NA NA       NA       WB IG regional … imput… #>  3 LBN    2002 <NA>   69.2    NA    NA NA       NA       WB IG regional … imput… #>  4 LBN    2003 <NA>   70.2    NA    NA NA       NA       WB IG regional … imput… #>  5 LBN    2004 <NA>   71.2    NA    NA NA       NA       WB IG regional … imput… #>  6 LBN    2005 <NA>   72.2    NA    NA NA       NA       WB IG regional … imput… #>  7 LBN    2006 <NA>   73.1    NA    NA NA       NA       WB IG regional … imput… #>  8 LBN    2007 <NA>   74.0    NA    NA NA       NA       WB IG regional … imput… #>  9 LBN    2008 <NA>   74.8    NA    NA NA       NA       WB IG regional … imput… #> 10 LBN    2009 <NA>   75.6    NA    NA NA       NA       WB IG regional … imput… #> 11 LBN    2010 <NA>   76.3    NA    NA NA       NA       WB IG regional … imput… #> 12 LBN    2011 <NA>   77.0    NA    NA NA       NA       WB IG regional … imput… #> 13 LBN    2012 <NA>   77.6    NA    NA NA       NA       WB IG regional … imput… #> 14 LBN    2013 <NA>   78.2    NA    NA NA       NA       WB IG regional … imput… #> 15 LBN    2014 <NA>   78.7    NA    NA NA       NA       WB IG regional … imput… #> 16 LBN    2015 <NA>   79.2    NA    NA NA       NA       WB IG regional … imput… #> 17 LBN    2016 <NA>   79.7    NA    NA NA       NA       WB IG regional … imput… #> 18 LBN    2017 <NA>   80.1    NA    NA NA       NA       WB IG regional … imput… #> 19 LBN    2018 <NA>   80.5    NA    NA NA       NA       WB IG regional … imput… #> # … with 5 more variables: type_detail <lgl>, other_detail <lgl>, #> #   upload_detail <lgl>, region <chr>, pred <dbl>"},{"path":"/index.html","id":"average-trend-modeling","dir":"","previous_headings":"","what":"Average trend modeling","title":"Provides Streamlined Methods for Data Imputation and Forecasting for WHO DDI Statistics","text":"often want directly build models original dataset generate predicted values, might instead want generate average trends across larger groups instead, apply original data. instance, generating trends region, applying regional trends back country level. predict_...avg_trend() functions augury allow us just , applying models used grouped set columns. work across specific groups, specified average_cols, averaging numeric values specified response variable variables extracted formula. specified model fit averaged data, predicted values joined back original data frame. Let’s look example using blood pressure data, comprehensive time series. Alright, , 6 regions. use regions fit model use INLA predict 2023, apply trends input countries. , can see generated model using 2nd order random walk INLA, however, model generated averaging data regions first, fitting random walk reach (since group_models = TRUE) fitting trends original data. Note specifics set, predict_..._avg_trend() functions slightly complex others: average_cols must contain sort_col. , since use year_n time series rather year, sort time. average_cols refers groupings used averaging (take average region year case). , model fit average_cols sort_col. group_col groupings used original data frame, still necessary applying trend back original data. variable formula, must either average_cols must numeric column can averaged. formula applied data frame dplyr::group_by() dplyr::summarize() reduced . highlight point, example, ’s actually happening actually fitting model summarized data: Since average_cols = c(\"who_region\", \"year_n\"), took mean values formula average_cols, case just value. instance, tried specify model using iso3 formula: get error message indicating iso3 must numeric included average_cols grouping. without numeric average_cols, ’s way dplyr::group_by() %>% dplyr::summarize() non-numeric column automatically (reduce country-level ISO3 codes regional level?). slightly complex, ensuring follow means easily successfully get meaningful trend predictions data frames using trends generated grouped data.","code":"library(augury)  df <- ghost::gho_data(\"BP_04\", query = \"$filter=Dim1 eq 'MLE' and Dim2 eq 'YEARS18-PLUS'\") %>%   billionaiRe::wrangle_gho_data() %>%   dplyr::right_join(covariates_df) %>%   dplyr::select(iso3, year, year_n, value) %>%   dplyr::filter(whoville::is_who_member(iso3),                # keep WHO member states                 year >= 2000, year <= 2023) %>%               # get relevant years     dplyr::mutate(who_region = whoville::iso3_to_regions(iso3)) # get WHO regions #> Warning: Some of the rows are missing a source value. #> Joining, by = c(\"iso3\", \"year\")  ur <- unique(df$who_region) ur #> [1] \"EMR\"  \"AFR\"  \"EUR\"  \"AMR\"  \"WPR\"  \"SEAR\" pred_df <- df %>%   predict_inla_avg_trend(formula = value ~ f(year_n, model = \"rw2\"),                          average_cols = c(\"who_region\", \"year_n\"),                          group_models = TRUE,                          group_col = \"iso3\",                          sort_col = \"year_n\")  pred_df %>%   dplyr::filter(iso3 == \"AFG\", year >= 2013) #> # A tibble: 11 × 10 #>    iso3   year year_n value who_region  pred pred_upper pred_lower upper lower #>    <chr> <int>  <dbl> <dbl> <chr>      <dbl>      <dbl>      <dbl> <dbl> <dbl> #>  1 AFG    2013     14  30.4 EMR         29.4       29.4       29.4    NA    NA #>  2 AFG    2014     15  30.4 EMR         29.4       29.4       29.4    NA    NA #>  3 AFG    2015     16  30.4 EMR         29.4       29.4       29.4    NA    NA #>  4 AFG    2016     17  29.4 EMR         29.4       29.4       29.4    NA    NA #>  5 AFG    2017     18  29.4 EMR         29.4       29.4       29.4    NA    NA #>  6 AFG    2018     19  29.4 EMR         29.4       29.4       29.4    NA    NA #>  7 AFG    2019     20  29.4 EMR         29.4       29.4       29.4    NA    NA #>  8 AFG    2020     21  29.4 EMR         29.4       29.4       29.4    NA    NA #>  9 AFG    2021     22  29.4 EMR         29.4       29.4       29.4    NA    NA #> 10 AFG    2022     23  29.4 EMR         29.4       29.4       29.4    NA    NA #> 11 AFG    2023     24  29.4 EMR         29.4       29.4       29.4    NA    NA df %>%   dplyr::group_by(who_region, year_n) %>%   dplyr::summarize(value = mean(value, na.rm = T)) %>%   head() #> `summarise()` has grouped output by 'who_region'. You can override using the `.groups` argument. #> # A tibble: 6 × 3 #> # Groups:   who_region [1] #>   who_region year_n value #>   <chr>       <dbl> <dbl> #> 1 AFR             1  29.7 #> 2 AFR             2  29.6 #> 3 AFR             3  29.5 #> 4 AFR             4  29.4 #> 5 AFR             5  29.3 #> 6 AFR             6  29.2 predict_inla_avg_trend(df,                        formula = value ~ iso3 + f(year_n, model = \"rw2\"),                        average_cols = c(\"who_region\", \"year_n\"),                        group_models = TRUE,                        group_col = \"iso3\",                        sort_col = \"year_n\") #> Error: iso3 must be numeric columns for use in averaging, or included in `average_cols` for grouping."},{"path":"/reference/assert_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that args in ellipses are columns in df — assert_columns","title":"Assert that args in ellipses are columns in df — assert_columns","text":"Assert args ellipses columns df","code":""},{"path":"/reference/assert_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that args in ellipses are columns in df — assert_columns","text":"","code":"assert_columns(df, ...)"},{"path":"/reference/assert_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that args in ellipses are columns in df — assert_columns","text":"df data frame. ... Column names test.","code":""},{"path":"/reference/assert_columns_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that column names are not identical — assert_columns_unique","title":"Assert that column names are not identical — assert_columns_unique","text":"Takes number column name variables, asserts .","code":""},{"path":"/reference/assert_columns_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that column names are not identical — assert_columns_unique","text":"","code":"assert_columns_unique(...)"},{"path":"/reference/assert_columns_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that column names are not identical — assert_columns_unique","text":"... Column names","code":""},{"path":"/reference/assert_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that df is a data frame — assert_df","title":"Assert that df is a data frame — assert_df","text":"Assert df data frame","code":""},{"path":"/reference/assert_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that df is a data frame — assert_df","text":"","code":"assert_df(df)"},{"path":"/reference/assert_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that df is a data frame — assert_df","text":"df Supposed data frame","code":""},{"path":"/reference/assert_error_correct_avg_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"If using error_correct, then check that the columns are either in the\nformula_vars or average_cols, otherwise produce an error. — assert_error_correct_avg_trend","title":"If using error_correct, then check that the columns are either in the\nformula_vars or average_cols, otherwise produce an error. — assert_error_correct_avg_trend","text":"using error_correct, check columns either formula_vars average_cols, otherwise produce error.","code":""},{"path":"/reference/assert_error_correct_avg_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"If using error_correct, then check that the columns are either in the\nformula_vars or average_cols, otherwise produce an error. — assert_error_correct_avg_trend","text":"","code":"assert_error_correct_avg_trend(   formula_vars,   average_cols,   error_correct,   error_correct_cols )"},{"path":"/reference/assert_error_correct_avg_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"If using error_correct, then check that the columns are either in the\nformula_vars or average_cols, otherwise produce an error. — assert_error_correct_avg_trend","text":"formula_vars Variables included model formula, generated .vars(formula). average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values.","code":""},{"path":"/reference/assert_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that x is a function — assert_function","title":"Assert that x is a function — assert_function","text":"Assert x function","code":""},{"path":"/reference/assert_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that x is a function — assert_function","text":"","code":"assert_function(x)"},{"path":"/reference/assert_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that x is a function — assert_function","text":"x Supposed function test","code":""},{"path":"/reference/assert_group_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert if group_models TRUE then group_col not NULL — assert_group_models","title":"Assert if group_models TRUE then group_col not NULL — assert_group_models","text":"Assert group_models TRUE group_col NULL","code":""},{"path":"/reference/assert_group_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert if group_models TRUE then group_col not NULL — assert_group_models","text":"","code":"assert_group_models(group_col, group_models)"},{"path":"/reference/assert_group_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert if group_models TRUE then group_col not NULL — assert_group_models","text":"group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame.","code":""},{"path":"/reference/assert_group_sort_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert sort column for use in average trend functions — assert_group_sort_col","title":"Assert sort column for use in average trend functions — assert_group_sort_col","text":"Takes formula variables average columns, well sort column argument. sort_col provided, error generated formula_vars average_cols. sort_col provided, warnings generated average trend can generated.","code":""},{"path":"/reference/assert_group_sort_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert sort column for use in average trend functions — assert_group_sort_col","text":"","code":"assert_group_sort_col(formula_vars, average_cols, sort_col)"},{"path":"/reference/assert_group_sort_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert sort column for use in average trend functions — assert_group_sort_col","text":"formula_vars Variables included model formula, generated .vars(formula). average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\".","code":""},{"path":"/reference/assert_group_sort_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert sort column for use in average trend functions — assert_group_sort_col","text":"Column name sorting averaged data generate trend.","code":""},{"path":"/reference/assert_h.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that h, for forecasting, is > 0 — assert_h","title":"Assert that h, for forecasting, is > 0 — assert_h","text":"Assert h, forecasting, > 0","code":""},{"path":"/reference/assert_h.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that h, for forecasting, is > 0 — assert_h","text":"","code":"assert_h(h)"},{"path":"/reference/assert_h.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that h, for forecasting, is > 0 — assert_h","text":"h Number missing values series passed forecast","code":""},{"path":"/reference/assert_inla.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert if INLA is installed, for use in predict_inla...() functions. — assert_inla","title":"Assert if INLA is installed, for use in predict_inla...() functions. — assert_inla","text":"Assert INLA installed, use predict_inla...() functions.","code":""},{"path":"/reference/assert_inla.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert if INLA is installed, for use in predict_inla...() functions. — assert_inla","text":"","code":"assert_inla()"},{"path":"/reference/assert_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that x is a function — assert_model","title":"Assert that x is a function — assert_model","text":"Assert x function","code":""},{"path":"/reference/assert_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that x is a function — assert_model","text":"","code":"assert_model(x)"},{"path":"/reference/assert_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that x is a function — assert_model","text":"x Model function test","code":""},{"path":"/reference/assert_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert numeric value — assert_numeric","title":"Assert numeric value — assert_numeric","text":"Assert numeric value","code":""},{"path":"/reference/assert_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert numeric value — assert_numeric","text":"","code":"assert_numeric(x, n)"},{"path":"/reference/assert_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert numeric value — assert_numeric","text":"x Numeric value check n Required length vector","code":""},{"path":"/reference/assert_numeric_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert columns in df are numeric — assert_numeric_cols","title":"Assert columns in df are numeric — assert_numeric_cols","text":"Assert columns df numeric","code":""},{"path":"/reference/assert_numeric_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert columns in df are numeric — assert_numeric_cols","text":"","code":"assert_numeric_cols(cols, df)"},{"path":"/reference/assert_numeric_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert columns in df are numeric — assert_numeric_cols","text":"cols Columns check df Data frame columns","code":""},{"path":"/reference/assert_numeric_cols_avg.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert columns in df are numeric, for use with average trend functions — assert_numeric_cols_avg","title":"Assert columns in df are numeric, for use with average trend functions — assert_numeric_cols_avg","text":"Checks columns numeric df, returns error message specifying must either numeric explicitly included average_cols grouping used averaging.","code":""},{"path":"/reference/assert_numeric_cols_avg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert columns in df are numeric, for use with average trend functions — assert_numeric_cols_avg","text":"","code":"assert_numeric_cols_avg(cols, df)"},{"path":"/reference/assert_numeric_cols_avg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert columns in df are numeric, for use with average trend functions — assert_numeric_cols_avg","text":"cols Columns check df Data frame columns","code":""},{"path":"/reference/assert_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that x is a character vector of length n — assert_string","title":"Assert that x is a character vector of length n — assert_string","text":"Assert x character vector length n","code":""},{"path":"/reference/assert_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that x is a character vector of length n — assert_string","text":"","code":"assert_string(x, n)"},{"path":"/reference/assert_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that x is a character vector of length n — assert_string","text":"x Supposed string test n Required length vector","code":""},{"path":"/reference/assert_test_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that test_col is of logical type — assert_test_col","title":"Assert that test_col is of logical type — assert_test_col","text":"Assert test_col logical type","code":""},{"path":"/reference/assert_test_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that test_col is of logical type — assert_test_col","text":"","code":"assert_test_col(df, test_col)"},{"path":"/reference/assert_test_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that test_col is of logical type — assert_test_col","text":"df Data frame model data. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned.","code":""},{"path":"/reference/augury_add_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds empty columns to df — augury_add_columns","title":"Adds empty columns to df — augury_add_columns","text":"Used models generated based obs_filter.","code":""},{"path":"/reference/augury_add_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds empty columns to df — augury_add_columns","text":"","code":"augury_add_columns(df, cols)"},{"path":"/reference/augury_add_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds empty columns to df — augury_add_columns","text":"df Data frame cols Vector column names add df","code":""},{"path":"/reference/calculate_aarr.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract AARR from vector of years and prevalence — calculate_aarr","title":"Extract AARR from vector of years and prevalence — calculate_aarr","text":"Extract AARR vector years prevalence","code":""},{"path":"/reference/calculate_aarr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract AARR from vector of years and prevalence — calculate_aarr","text":"","code":"calculate_aarr(years, prevalence)"},{"path":"/reference/calculate_aarr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract AARR from vector of years and prevalence — calculate_aarr","text":"years Vector year values prevalence Vector prevalence values","code":""},{"path":"/reference/calculate_sq_ch.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate change error — calculate_sq_ch","title":"Calculate change error — calculate_sq_ch","text":"use calculate RMChE, calculates squared change error observed predicted columns.","code":""},{"path":"/reference/calculate_sq_ch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate change error — calculate_sq_ch","text":"","code":"calculate_sq_ch(response, pred, test_period, test_period_flex)"},{"path":"/reference/calculate_sq_ch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate change error — calculate_sq_ch","text":"response Observations test. pred Predictions test. test_period Length period test RMChE. NULL, beginning end points group group_col compared. Otherwise, test_period must set integer n group, comparisons made end point n periods prior. test_period_flex Logical value indicating test_period less full length series, change error still calculated point. Defaults FALSE.","code":""},{"path":"/reference/covariates_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Default covariates for use in augury functions. — covariates_df","title":"Default covariates for use in augury functions. — covariates_df","text":"dataset containing default covariates member states, use within augury functions. used defaults provided modeling functions.","code":""},{"path":"/reference/covariates_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default covariates for use in augury functions. — covariates_df","text":"","code":"covariates_df"},{"path":"/reference/covariates_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default covariates for use in augury functions. — covariates_df","text":"data frame 5044 rows 11 variables: iso3 Country ISO3 code. year Year. year_n Year, starting 1 2000. use time series modelling. region Unclear origin regional classification. un_subregion UN subregional classification. sdg_subregion UN subregional classification SDG calculation purposes. gbd_subregion IHME GBD subregional classification. sdi Socio-demographic Index, composite calculated using publicly available total fertility rates, mean years schooling, lag distributed income per capita. sdi_scaled Socio-demographic Index, rescaled 0 - 1 scale. e0 Life expectancy birth, total (years). e0_scaled Life expectancy birth, rescaled 0 - 1 scale.","code":""},{"path":"/reference/covariates_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Default covariates for use in augury functions. — covariates_df","text":"Region, World Bank regional groups, 2020. Socio-demographic Index, World Health Organization calculation, 2020. Life expectancy, World Population Prospects, 2019.","code":""},{"path":"/reference/error_correct_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Use mean error to correct predictions — error_correct_fn","title":"Use mean error to correct predictions — error_correct_fn","text":"Use mean error correct predictions","code":""},{"path":"/reference/error_correct_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use mean error to correct predictions — error_correct_fn","text":"","code":"error_correct_fn(   df,   response,   group_col,   sort_col,   sort_descending,   pred_col,   pred_upper_col,   pred_lower_col,   test_col,   error_correct,   error_correct_cols,   shift_trend )"},{"path":"/reference/error_correct_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use mean error to correct predictions — error_correct_fn","text":"df Data frame model data. response Column name response variable. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":""},{"path":"/reference/error_correct_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use mean error to correct predictions — error_correct_fn","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/expand_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand input data to make explicit missing values — expand_df","title":"Expand input data to make explicit missing values — expand_df","text":"expand_df() wrapper around tidyr::expand_grid() dplyr::right_join() can used make missing values explicit within data frame prior passed predict_...() function.","code":""},{"path":"/reference/expand_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand input data to make explicit missing values — expand_df","text":"","code":"expand_df(   df,   ...,   response = \"value\",   keep_no_obs = TRUE,   keep_before_obs = FALSE,   sort_col = \"year\",   sort_descending = FALSE,   group_col = \"iso3\",   join_covariates = FALSE )"},{"path":"/reference/expand_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand input data to make explicit missing values — expand_df","text":"df Data frame. ... Named vectors pass expand grid. response Column name response variables whose missing values infilled projected, defaults \"value\". keep_no_obs Logical value indicating whether keep rows expanded data frame data. Defaults TRUE. done based group_col, provided. keep_before_obs Logical value indicating data available, whether keep rows expanded data frame lie first observed point. Defaults FALSE. done based sort_col group_col, provided. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". join_covariates Logical value indicating whether join final expanded data frame covariates_df data frame. TRUE, iso3 year must columns within input df.","code":""},{"path":"/reference/expand_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand input data to make explicit missing values — expand_df","text":"Expanded data frame explicit missing values.","code":""},{"path":"/reference/expand_df_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter expand_df — expand_df_filter","title":"Filter expand_df — expand_df_filter","text":"Used within expand_df() filter data based arguments keep_no_obs keep_before_obs.","code":""},{"path":"/reference/expand_df_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter expand_df — expand_df_filter","text":"","code":"expand_df_filter(   df,   response,   keep_no_obs,   keep_before_obs,   sort_col,   sort_descending,   group_col )"},{"path":"/reference/expand_df_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter expand_df — expand_df_filter","text":"df Data frame. response Column name response variables whose missing values infilled projected, defaults \"value\". keep_no_obs Logical value indicating whether keep rows expanded data frame data. Defaults TRUE. done based group_col, provided. keep_before_obs Logical value indicating data available, whether keep rows expanded data frame lie first observed point. Defaults FALSE. done based sort_col group_col, provided. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\".","code":""},{"path":"/reference/expand_df_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter expand_df — expand_df_filter","text":"Filtered expanded data frame.","code":""},{"path":"/reference/expand_df_min.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for expand_df_filter() to calculate min for keeping data — expand_df_min","title":"Helper for expand_df_filter() to calculate min for keeping data — expand_df_min","text":"Want make sure returns -Inf rather Inf expand_df_filter() filter work","code":""},{"path":"/reference/expand_df_min.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for expand_df_filter() to calculate min for keeping data — expand_df_min","text":"","code":"expand_df_min(x)"},{"path":"/reference/expand_df_min.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for expand_df_filter() to calculate min for keeping data — expand_df_min","text":"x Vector","code":""},{"path":"/reference/expand_df_min.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper for expand_df_filter() to calculate min for keeping data — expand_df_min","text":"Value.","code":""},{"path":"/reference/filter_model_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters data for modeling — filter_model_data","title":"Filters data for modeling — filter_model_data","text":"Based filter_na argument, data filtered modelling based NA values within df.","code":""},{"path":"/reference/filter_model_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters data for modeling — filter_model_data","text":"","code":"filter_model_data(df, formula_vars, filter_na)"},{"path":"/reference/filter_model_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters data for modeling — filter_model_data","text":"df Data frame model data. formula_vars Character vector variables used model. Can extracted formula using .vars(fmla). filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering .","code":""},{"path":"/reference/filter_model_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filters data for modeling — filter_model_data","text":"data frame.","code":""},{"path":"/reference/fit_aarr_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate prediction from model object — fit_aarr_model","title":"Generate prediction from model object — fit_aarr_model","text":"fit_aarr_data() calculates AARR generates prediction based calculated AARR.","code":""},{"path":"/reference/fit_aarr_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate prediction from model object — fit_aarr_model","text":"","code":"fit_aarr_model(   df,   response,   interpolate,   test_col,   sort_col,   sort_descending,   sort_col_min,   group_col,   group_models,   obs_filter,   pred_col )"},{"path":"/reference/fit_aarr_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate prediction from model object — fit_aarr_model","text":"df Data frame model data. response Column name prevalence variable used calculate AARR. interpolate Logical value, whether interpolate values based estimated AARR observations. Defaults FALSE. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. sort_col Column name column arrange data dplyr::arrange(), prior filtering latest contiguous time series producing forecast. used NULL, defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. sort_col_min provided, numeric value sets minimum value needed met sort_col observation used calculating AARR. sort_col = \"year\" sort_col_min = 2008, observations 2008 onward used calculating AARR. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. pred_col Column name store predicted value.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/fit_aarr_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate prediction from model object — fit_aarr_model","text":"data frame.","code":""},{"path":"/reference/fit_forecast_average_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit forecast model to averages and apply trend to original data — fit_forecast_average_model","title":"Fit forecast model to averages and apply trend to original data — fit_forecast_average_model","text":"Used within predict_forecast_avg_trend(), function fits model data frame, working whether model fit across entire data frame fit group individually. Data filtered prior fitting, model(s) fit, fitted values generated original.","code":""},{"path":"/reference/fit_forecast_average_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit forecast model to averages and apply trend to original data — fit_forecast_average_model","text":"","code":"fit_forecast_average_model(   df,   forecast_function,   response,   average_cols,   weight_col,   ...,   test_col,   group_col,   group_models,   sort_col,   sort_descending,   pred_col,   pred_upper_col,   pred_lower_col,   filter_na,   ret )"},{"path":"/reference/fit_forecast_average_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit forecast model to averages and apply trend to original data — fit_forecast_average_model","text":"df Data frame model data. forecast_function R function outputs forecast object coming forecast package. can directly pass forecast::forecast() function, can pass wrappers forecast::holt() forecast::ses(). response Column name response variable used input forecast function. average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling. weight_col Column name column weights used averaging, country population. ... Additional arguments passed forecast function. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. sort_col Column name column arrange data dplyr::arrange(), prior filtering latest contiguous time series producing forecast. used NULL, defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components.","code":""},{"path":"/reference/fit_forecast_average_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit forecast model to averages and apply trend to original data — fit_forecast_average_model","text":"List mdl (fitted model) df (data frame fitted values confidence bounds generated model).","code":""},{"path":"/reference/fit_forecast_average_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit forecast model to averages and apply trend to original data — fit_forecast_average_model","text":"fitting models individually group, mdl never returned, instead large group models. Otherwise, list mdl df returned used within predict_forecast().","code":""},{"path":"/reference/fit_forecast_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit forecast model to data — fit_forecast_model","title":"Fit forecast model to data — fit_forecast_model","text":"Used within predict_forecast(), function fits model data frame, working whether model fit across entire data frame fit group individually. Data filtered prior fitting, model(s) fit, fitted values generated original.","code":""},{"path":"/reference/fit_forecast_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit forecast model to data — fit_forecast_model","text":"","code":"fit_forecast_model(   df,   forecast_function,   response,   ...,   test_col,   group_col,   group_models,   obs_filter,   sort_col,   sort_descending,   pred_col,   pred_upper_col,   pred_lower_col,   filter_na,   ret )"},{"path":"/reference/fit_forecast_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit forecast model to data — fit_forecast_model","text":"df Data frame model data. forecast_function R function outputs forecast object coming forecast package. can directly pass forecast::forecast() function, can pass wrappers forecast::holt() forecast::ses(). response Column name response variable used input forecast function. ... Additional arguments passed forecast function. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name column arrange data dplyr::arrange(), prior filtering latest contiguous time series producing forecast. used NULL, defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/fit_forecast_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit forecast model to data — fit_forecast_model","text":"List mdl (fitted model) df (data frame fitted values confidence bounds generated model).","code":""},{"path":"/reference/fit_forecast_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit forecast model to data — fit_forecast_model","text":"fitting models individually group, mdl never returned, instead large list models. Otherwise, list mdl df returned used within predict_inla().","code":""},{"path":"/reference/fit_general_average_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit general model to averages and apply trend to original data — fit_general_average_model","title":"Fit general model to averages and apply trend to original data — fit_general_average_model","text":"Used within predict_general_mdl_avg_trend(), function fits model data frame, working whether model fit across entire data frame fit group individually. Data filtered prior fitting, model(s) fit, fitted values generated original.","code":""},{"path":"/reference/fit_general_average_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit general model to averages and apply trend to original data — fit_general_average_model","text":"","code":"fit_general_average_model(   df,   model,   formula,   average_cols,   weight_col,   ...,   formula_vars,   test_col,   group_col,   group_models,   sort_col,   sort_descending,   pred_col,   pred_upper_col,   pred_lower_col,   filter_na,   ret,   error_correct,   error_correct_cols,   shift_trend )"},{"path":"/reference/fit_general_average_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit general model to averages and apply trend to original data — fit_general_average_model","text":"df Data frame model data. model R function outputs model object predict.model generic, stats::family() contains inverse link function linkinv predict.model() accepts se.fit = TRUE argument returns confidence intervals. includes stats::lm, stats::glm, lme4::lmer. formula formula supplied model, y~x. Variables defined formula used averaging. variable defined part average_cols, used within dplyr::group_by() prior averaging. part average_cols, must numeric column whose average taken. average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling. weight_col Column name column weights used averaging, country population. ... arguments passed model function. formula_vars Variables included model formula, generated .vars(formula). test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, whether run separate models group defined average_cols. sort_col part average_cols, used group models. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":""},{"path":"/reference/fit_general_average_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit general model to averages and apply trend to original data — fit_general_average_model","text":"List mdl (fitted model) df (data frame fitted values confidence bounds generated model).","code":""},{"path":"/reference/fit_general_average_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit general model to averages and apply trend to original data — fit_general_average_model","text":"fitting models individually group, mdl never returned, instead large group models. Otherwise, list mdl df returned used within predict_general_mdl().","code":""},{"path":"/reference/fit_general_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit general model to data — fit_general_model","title":"Fit general model to data — fit_general_model","text":"Used within predict_general_mdl(), function fits model data frame, workingw hether model fit across entire data frame fit group individually. Data filtered prior fitting, model(s) fit, fitted values generated original.","code":""},{"path":"/reference/fit_general_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit general model to data — fit_general_model","text":"","code":"fit_general_model(   df,   model,   formula,   ...,   formula_vars,   test_col,   group_col,   group_models,   obs_filter,   sort_col,   sort_descending,   pred_col,   pred_upper_col,   pred_lower_col,   filter_na,   ret,   error_correct,   error_correct_cols,   shift_trend )"},{"path":"/reference/fit_general_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit general model to data — fit_general_model","text":"df Data frame model data. model R function outputs model object predict.model generic, stats::family() contains inverse link function linkinv predict.model() accepts se.fit = TRUE argument returns confidence intervals. includes stats::lm, stats::glm, lme4::lmer. formula formula supplied model, y~x. ... arguments passed model function. formula_vars Variables included model formula, generated .vars(formula). test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/fit_general_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit general model to data — fit_general_model","text":"List mdl (fitted model) df (data frame fitted values confidence bounds generated model).","code":""},{"path":"/reference/fit_general_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit general model to data — fit_general_model","text":"fitting models individually group, mdl never returned, instead large group models. Otherwise, list mdl df returned used within predict_general_mdl().","code":""},{"path":"/reference/fit_inla_average_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit INLA model to averages and apply trend to original data — fit_inla_average_model","title":"Fit INLA model to averages and apply trend to original data — fit_inla_average_model","text":"Used within predict_inla_avg_trend(), function fits model data frame, working whether model fit across entire data frame fit group individually. Data filtered prior fitting, model(s) fit, fitted values generated original.","code":""},{"path":"/reference/fit_inla_average_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit INLA model to averages and apply trend to original data — fit_inla_average_model","text":"","code":"fit_inla_average_model(   df,   formula,   average_cols,   weight_col,   control.predictor,   ...,   formula_vars,   test_col,   group_col,   group_models,   sort_col,   sort_descending,   pred_col,   pred_upper_col,   pred_lower_col,   filter_na,   ret,   error_correct,   error_correct_cols,   shift_trend )"},{"path":"/reference/fit_inla_average_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit INLA model to averages and apply trend to original data — fit_inla_average_model","text":"df Data frame model data. formula formula supplied model, y~x. average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling. weight_col Column name column weights used averaging, country population. control.predictor Used set compute = TRUE ensure posterior marginals fitted values obtained mean standard deviation fitted values returned use infilling predictions. Additional arguments can passed control.predictor list, must always include compute = TRUE. See INLA::control.predictor() details. ... Additional arguments passed INLA::inla(). formula_vars Variables included model formula, generated .vars(formula). test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. filter_na Character value specifying , , filter NA values dataset prior applying model. default, observations missing predictors removed, although can also remove rows missing dependent independent variables, filtering . Model prediction fitting done one pass INLA::inla(), predictions observations missing dependent variables removed. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":""},{"path":"/reference/fit_inla_average_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit INLA model to averages and apply trend to original data — fit_inla_average_model","text":"List mdl (fitted model) df (data frame fitted values confidence bounds generated model).","code":""},{"path":"/reference/fit_inla_average_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit INLA model to averages and apply trend to original data — fit_inla_average_model","text":"fitting models individually group, mdl never returned, instead large group models. Otherwise, list mdl df returned used within predict_inla().","code":""},{"path":"/reference/fit_inla_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit INLA model to data — fit_inla_model","title":"Fit INLA model to data — fit_inla_model","text":"Used within predict_inla(), function fits model data frame, working whether model fit across entire data frame fit group individually. Data filtered prior fitting, model(s) fit, fitted values generated original.","code":""},{"path":"/reference/fit_inla_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit INLA model to data — fit_inla_model","text":"","code":"fit_inla_model(   df,   formula,   control.predictor,   ...,   formula_vars,   test_col,   group_col,   group_models,   obs_filter,   sort_col,   sort_descending,   pred_col,   pred_upper_col,   pred_lower_col,   filter_na,   ret,   error_correct,   error_correct_cols,   shift_trend )"},{"path":"/reference/fit_inla_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit INLA model to data — fit_inla_model","text":"df Data frame model data. formula formula supplied model, y~x. control.predictor Used set compute = TRUE ensure posterior marginals fitted values obtained mean standard deviation fitted values returned use infilling predictions. Additional arguments can passed control.predictor list, must always include compute = TRUE. See INLA::control.predictor() details. ... Additional arguments passed INLA::inla(). formula_vars Variables included model formula, generated .vars(formula). test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. filter_na Character value specifying , , filter NA values dataset prior applying model. default, observations missing predictors removed, although can also remove rows missing dependent independent variables, filtering . Model prediction fitting done one pass INLA::inla(), predictions observations missing dependent variables removed. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/fit_inla_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit INLA model to data — fit_inla_model","text":"List mdl (fitted model) df (data frame fitted values confidence bounds generated model).","code":""},{"path":"/reference/fit_inla_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit INLA model to data — fit_inla_model","text":"fitting models individually group, mdl never returned, instead large group models. Otherwise, list mdl df returned used within predict_inla().","code":""},{"path":"/reference/fit_lme4_average_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit mixed model to averages and apply trend to original data — fit_lme4_average_model","title":"Fit mixed model to averages and apply trend to original data — fit_lme4_average_model","text":"Used within predict_lme4_avg_trend(), function fits model data frame, working whether model fit across entire data frame fit group individually. Data filtered prior fitting, model(s) fit, fitted values generated original.","code":""},{"path":"/reference/fit_lme4_average_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit mixed model to averages and apply trend to original data — fit_lme4_average_model","text":"","code":"fit_lme4_average_model(   df,   model,   formula,   average_cols,   weight_col,   ...,   formula_vars,   test_col,   group_col,   group_models,   sort_col,   sort_descending,   pred_col,   pred_upper_col,   pred_lower_col,   filter_na,   ret,   error_correct,   error_correct_cols,   shift_trend )"},{"path":"/reference/fit_lme4_average_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit mixed model to averages and apply trend to original data — fit_lme4_average_model","text":"df Data frame model data. model lme4 function outputs merMod object can passed merTools::predictInterval(). one lme4::lmer(), lme4::glmer(), lme4::nlmer(). formula formula supplied model, y~x. average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling. weight_col Column name column weights used averaging, country population. ... arguments passed model function. formula_vars Variables included model formula, generated .vars(formula). test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":""},{"path":"/reference/fit_lme4_average_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit mixed model to averages and apply trend to original data — fit_lme4_average_model","text":"List mdl (fitted model) df (data frame fitted values confidence bounds generated model).","code":""},{"path":"/reference/fit_lme4_average_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit mixed model to averages and apply trend to original data — fit_lme4_average_model","text":"fitting models individually group, mdl never returned, instead large group models. Otherwise, list mdl df returned used within predict_lme4_mdl().","code":""},{"path":"/reference/fit_lme4_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit general model to data — fit_lme4_model","title":"Fit general model to data — fit_lme4_model","text":"Used within predict_lme4(), function fits model data frame, working whether model fit across entire data frame fit group individually. Data filtered prior fitting, model(s) fit, fitted values generated original.","code":""},{"path":"/reference/fit_lme4_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit general model to data — fit_lme4_model","text":"","code":"fit_lme4_model(   df,   model,   formula,   ...,   formula_vars,   test_col,   group_col,   group_models,   obs_filter,   sort_col,   sort_descending,   pred_col,   pred_upper_col,   pred_lower_col,   filter_na,   ret,   error_correct,   error_correct_cols,   shift_trend )"},{"path":"/reference/fit_lme4_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit general model to data — fit_lme4_model","text":"df Data frame model data. model lme4 function outputs merMod object can passed merTools::predictInterval(). one lme4::lmer(), lme4::glmer(), lme4::nlmer(). formula formula supplied model, y~x. ... arguments passed model function. formula_vars Variables included model formula, generated .vars(formula). test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/fit_lme4_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit general model to data — fit_lme4_model","text":"List mdl (fitted model) df (data frame fitted values confidence bounds generated model).","code":""},{"path":"/reference/fit_lme4_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit general model to data — fit_lme4_model","text":"fitting models individually group, mdl never returned, instead large group models. Otherwise, list mdl df returned used within predict_general_mdl().","code":""},{"path":"/reference/forecast_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Forecast data series — forecast_series","title":"Forecast data series — forecast_series","text":"Using series coming trim_series(), uses latest observed values forecast missing values.","code":""},{"path":"/reference/forecast_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forecast data series — forecast_series","text":"","code":"forecast_series(x, forecast_function, ...)"},{"path":"/reference/forecast_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forecast data series — forecast_series","text":"x Series forecast, coming trim_series() forecast_function R function outputs forecast object coming forecast package. can directly pass forecast::forecast() function, can pass wrappers forecast::holt() forecast::ses(). ... Additional arguments passed forecast function.","code":""},{"path":"/reference/forecast_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forecast data series — forecast_series","text":"Forecast model.","code":""},{"path":"/reference/get_average_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Produces averaged data frame that can then be passed for modelling. — get_average_df","title":"Produces averaged data frame that can then be passed for modelling. — get_average_df","text":"Produces averaged data frame can passed modelling.","code":""},{"path":"/reference/get_average_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produces averaged data frame that can then be passed for modelling. — get_average_df","text":"","code":"get_average_df(df, cols, average_cols, weight_col = NULL)"},{"path":"/reference/get_average_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produces averaged data frame that can then be passed for modelling. — get_average_df","text":"df Data frame model data. cols Name numeric column(s) take average . average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling. weight_col Column name column weights used averaging, country population.","code":""},{"path":"/reference/get_average_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produces averaged data frame that can then be passed for modelling. — get_average_df","text":"Data frame cols averaged across average_cols","code":""},{"path":"/reference/get_forecast_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data for forecast models — get_forecast_data","title":"Get data for forecast models — get_forecast_data","text":"Keep latest contiguous time series, dropping NA values response variable. Removes test column variables first.","code":""},{"path":"/reference/get_forecast_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data for forecast models — get_forecast_data","text":"","code":"get_forecast_data(df, response, sort_col, sort_descending, test_col)"},{"path":"/reference/get_forecast_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data for forecast models — get_forecast_data","text":"df Data frame model data. response Column name response variable used input forecast function. sort_col Column name column arrange data dplyr::arrange(), prior filtering latest contiguous time series producing forecast. used NULL, defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned.","code":""},{"path":"/reference/get_forecast_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data for forecast models — get_forecast_data","text":"data series.","code":""},{"path":"/reference/get_formula_avg_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Get variables that need to be averaged from formula. — get_formula_avg_cols","title":"Get variables that need to be averaged from formula. — get_formula_avg_cols","text":"Pulls variables used grouping averaged, checks numeric, returns .","code":""},{"path":"/reference/get_formula_avg_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get variables that need to be averaged from formula. — get_formula_avg_cols","text":"","code":"get_formula_avg_cols(df, formula_vars, average_cols)"},{"path":"/reference/get_formula_avg_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get variables that need to be averaged from formula. — get_formula_avg_cols","text":"df Data frame model data. formula_vars Variables included model formula, generated .vars(formula). average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling.","code":""},{"path":"/reference/get_model_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimizes dataset to data needed for modelling — get_model_data","title":"Minimizes dataset to data needed for modelling — get_model_data","text":"get_model_data() ensures variables necessary model included dataset missing data test sets removed, test_col NULL. filter_na \"\" (default), observations NA values removed using na.omit(). filter_na \"response\" \"predictors\" rows missing dependent independent variables removed, respectively. \"none\", filtering done .","code":""},{"path":"/reference/get_model_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimizes dataset to data needed for modelling — get_model_data","text":"","code":"get_model_data(   df,   formula_vars,   test_col,   group_col = NULL,   filter_na,   reduce_columns = TRUE )"},{"path":"/reference/get_model_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimizes dataset to data needed for modelling — get_model_data","text":"df Data frame model data. formula_vars Character vector variables used model. Can extracted formula using .vars(fmla). test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . reduce_columns Logical whether reduce number columns data just necessary modelling.","code":""},{"path":"/reference/get_model_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimizes dataset to data needed for modelling — get_model_data","text":"data frame.","code":""},{"path":"/reference/interpolate_aarr.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate using AARR from vector of years and prevalence — interpolate_aarr","title":"Interpolate using AARR from vector of years and prevalence — interpolate_aarr","text":"Interpolate using AARR vector years prevalence","code":""},{"path":"/reference/interpolate_aarr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate using AARR from vector of years and prevalence — interpolate_aarr","text":"","code":"interpolate_aarr(years, prevalence)"},{"path":"/reference/interpolate_aarr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate using AARR from vector of years and prevalence — interpolate_aarr","text":"years Vector year values prevalence Vector prevalence values","code":""},{"path":"/reference/join_covariates_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Join data frame with covariates data frame — join_covariates_df","title":"Join data frame with covariates data frame — join_covariates_df","text":"Left joins data frame augury::covariates_df.","code":""},{"path":"/reference/join_covariates_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join data frame with covariates data frame — join_covariates_df","text":"","code":"join_covariates_df(df, join_covariates)"},{"path":"/reference/join_covariates_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join data frame with covariates data frame — join_covariates_df","text":"df Data frame. join_covariates Logical value indicating whether join final expanded data frame covariates_df data frame. TRUE, iso3 year must columns within input df.","code":""},{"path":"/reference/join_covariates_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join data frame with covariates data frame — join_covariates_df","text":"Joined data frame.","code":""},{"path":"/reference/merge_average_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge average df with predictions with original data frame — merge_average_df","title":"Merge average df with predictions with original data frame — merge_average_df","text":"Merge average df predictions original data frame","code":""},{"path":"/reference/merge_average_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge average df with predictions with original data frame — merge_average_df","text":"","code":"merge_average_df(   avg_df,   df,   response,   average_cols,   group_col,   obs_filter,   sort_col,   pred_col,   pred_upper_col,   pred_lower_col,   test_col )"},{"path":"/reference/merge_average_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge average df with predictions with original data frame — merge_average_df","text":"avg_df Data frame average trends. df Data frame model data. response Column name response variable. average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/merge_average_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge average df with predictions with original data frame — merge_average_df","text":"Original data frame new trend joined .","code":""},{"path":"/reference/merge_prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge predicted data into data frame — merge_prediction","title":"Merge predicted data into data frame — merge_prediction","text":"Merges predicted data data frame. default, replace observed values modeled data.","code":""},{"path":"/reference/merge_prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge predicted data into data frame — merge_prediction","text":"","code":"merge_prediction(   df,   response,   group_col,   obs_filter,   sort_col,   sort_descending,   pred_col,   pred_upper_col,   pred_lower_col,   upper_col,   lower_col,   type_col,   types,   source_col,   source,   scenario_detail_col,   scenario_detail,   replace_obs )"},{"path":"/reference/merge_prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge predicted data into data frame — merge_prediction","text":"df Data frame model data. response Column name response variable. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/merge_prediction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge predicted data into data frame — merge_prediction","text":"data frame.","code":""},{"path":"/reference/model_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Get modeling error from a data frame — model_error","title":"Get modeling error from a data frame — model_error","text":"model_error() calculates modeling error using observed fitted values data frame. test_col provided, error calculated observations excluded modeling test purpose. Otherwise, error calculated non-missing values.","code":""},{"path":"/reference/model_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get modeling error from a data frame — model_error","text":"","code":"model_error(   df,   response,   test_col = NULL,   test_period = NULL,   test_period_flex = FALSE,   group_col = NULL,   sort_col = NULL,   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\" )"},{"path":"/reference/model_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get modeling error from a data frame — model_error","text":"df Data frame model data. response Column name response variable. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. test_period Length period test RMChE. NULL, beginning end points group group_col compared. Otherwise, test_period must set integer n group, comparisons made end point n periods prior. test_period_flex Logical value indicating test_period less full length series, change error still calculated point. Defaults FALSE. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound.","code":""},{"path":"/reference/model_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get modeling error from a data frame — model_error","text":"named vector errors: RMSE, MAE, MdAE, MASE, CBA, R2, COR RMChE.","code":""},{"path":"/reference/model_error.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get modeling error from a data frame — model_error","text":"error metrics generated model_error() following: RMSE: root mean squared error MAE: mean absolute error MdAE: median absolute error MASE: mean absolute scaled error. calculated test_col provided, test error scaled -sample error. CBA: confidence bound accuracy, % observations lying within confidence bounds. near 95%. calculated pred_upper_col pred_lower_col provided. R2: R-squared coefficient determination. Calculated test values test_col provided. Due variety models available within augury, well predict_..._avg_trend() functions, adjusted R-squared currently available. COR: Pearson correlation coefficient fitted values observations. Useful measure general trend matching beyond point error measurements used . group_col provided, correlation coefficients calculated within group average across groups returned. Calculated data, careful interpreting applied non-time series data. RMChE: root mean change error. Since GPW13 infilling projections designed estimate change time, RMChE measures accuracy change. calculated difference observed change two time periods predicted change across time periods. test_period NULL, beginning end group group_col, sorted sort_col. test_period provided integer n, instead calculated comparing change end n periods prior. test_period_flexibility says whether calculate change full length series less test_period. TRUE, compares change beginning end series group.","code":""},{"path":"/reference/parse_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Asserts formula and extract variables — parse_formula","title":"Asserts formula and extract variables — parse_formula","text":"Asserts formula extract variables","code":""},{"path":"/reference/parse_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asserts formula and extract variables — parse_formula","text":"","code":"parse_formula(formula)"},{"path":"/reference/parse_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asserts formula and extract variables — parse_formula","text":"formula formula supplied model, y~x.","code":""},{"path":"/reference/parse_obs_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse obs filter intro string to be evaluated — parse_obs_filter","title":"Parse obs filter intro string to be evaluated — parse_obs_filter","text":"function parses obs_filter argument passed predict_... function string ready evaluated merge_prediction(). output string parsed within case_when. obs_filter passed sets threshold fitting models generating predictions data based number observed data points. , '>=5' want fit model, generate predictions use replace observations 5 observations. Thus, case_when(), pass first logical argument anywhere '>=5' observations.","code":""},{"path":"/reference/parse_obs_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse obs filter intro string to be evaluated — parse_obs_filter","text":"","code":"parse_obs_filter(obs_filter, response)"},{"path":"/reference/parse_obs_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse obs filter intro string to be evaluated — parse_obs_filter","text":"obs_filter Obs filter string assert response Name response column","code":""},{"path":"/reference/parse_obs_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse obs filter intro string to be evaluated — parse_obs_filter","text":"String eval parsing","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/predict_aarr.html","id":null,"dir":"Reference","previous_headings":"","what":"Use annual average rate of reduction (AARR) to predict prevalence — predict_aarr","title":"Use annual average rate of reduction (AARR) to predict prevalence — predict_aarr","text":"predict_aarr() specific function designed use annual average rate reduction (AARR) prevalence data forecast future prevalence. particularly useful forecasting future prevalence full time series available, data points series.","code":""},{"path":"/reference/predict_aarr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use annual average rate of reduction (AARR) to predict prevalence — predict_aarr","text":"","code":"predict_aarr(   df,   response,   sort_col_min = NULL,   interpolate = FALSE,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   test_period = NULL,   test_period_flex = NULL,   group_col = \"iso3\",   group_models = TRUE,   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   type_col = NULL,   types = c(\"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\") )"},{"path":"/reference/predict_aarr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use annual average rate of reduction (AARR) to predict prevalence — predict_aarr","text":"df Data frame model data. response Column name prevalence variable used calculate AARR. sort_col_min provided, numeric value sets minimum value needed met sort_col observation used calculating AARR. sort_col = \"year\" sort_col_min = 2008, observations 2008 onward used calculating AARR. interpolate Logical value, whether interpolate values based estimated AARR observations. Defaults FALSE. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. test_period Length period test RMChE. NULL, beginning end points group group_col compared. Otherwise, test_period must set integer n group, comparisons made end point n periods prior. test_period_flex Logical value indicating test_period less full length series, change error still calculated point. Defaults FALSE. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name column arrange data dplyr::arrange(), prior filtering latest contiguous time series producing forecast. used NULL, defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. type_col Column name specifying data type. types Types add missing values. first value imputed values second extrapolated values. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_aarr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use annual average rate of reduction (AARR) to predict prevalence — predict_aarr","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_aarr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use annual average rate of reduction (AARR) to predict prevalence — predict_aarr","text":"function, current form, forecast data last observed data point, AARR ideal interpolation. case, model returned function dataset AARR values group (single value grouped variables). confidence bounds generated predict_aarr().","code":""},{"path":"/reference/predict_average.html","id":null,"dir":"Reference","previous_headings":"","what":"Use averages to impute and forecast data — predict_average","title":"Use averages to impute and forecast data — predict_average","text":"predict_average() simple infilling prediction using averages. Similar predict functions, also allows filling type source necessary. However, provide confidence bounds estimates, like predict_... model-based functions provide.","code":""},{"path":"/reference/predict_average.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use averages to impute and forecast data — predict_average","text":"","code":"predict_average(   df,   col = \"value\",   average_cols = NULL,   weight_col = NULL,   flat_extrap = TRUE,   ret = c(\"df\", \"all\", \"error\"),   test_col = NULL,   test_period = NULL,   test_period_flex = NULL,   group_col = \"iso3\",   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\"),   error_correct = FALSE,   error_correct_cols = NULL,   shift_trend = FALSE )"},{"path":"/reference/predict_average.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use averages to impute and forecast data — predict_average","text":"df Data frame model data. col Name column extrapolate/interpolate. average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling. weight_col Column name column weights used averaging, country population. flat_extrap Logical value determining whether flat extrapolate using latest average missing rows data available. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. test_period Length period test RMChE. NULL, beginning end points group group_col compared. Otherwise, test_period must set integer n group, comparisons made end point n periods prior. test_period_flex Logical value indicating test_period less full length series, change error still calculated point. Defaults FALSE. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced infilled values. default, replaces missing values col set \"none\" col changed. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_average.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use averages to impute and forecast data — predict_average","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_average.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use averages to impute and forecast data — predict_average","text":"year least 1 data point available, average calculated prediction. flat_extrap, latest average flat extrapolated end data. using test_col, average may available certain groups, flat extrapolation relied , meaning COR metric output errors difficult interpret use properly.","code":""},{"path":"/reference/predict_average_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute data using simple averages — predict_average_fn","title":"Impute data using simple averages — predict_average_fn","text":"predict_average_fn() simple imputation flat extrapolation using averages grouped average_cols.","code":""},{"path":"/reference/predict_average_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute data using simple averages — predict_average_fn","text":"","code":"predict_average_fn(   df,   col,   average_cols = NULL,   weight_col = NULL,   flat_extrap = TRUE,   test_col = NULL,   group_col = NULL,   obs_filter = NULL,   pred_col = \"pred\",   sort_col = NULL,   sort_descending = FALSE,   error_correct = FALSE,   error_correct_cols = NULL,   shift_trend = FALSE )"},{"path":"/reference/predict_average_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute data using simple averages — predict_average_fn","text":"df Data frame model data. col Name column extrapolate/interpolate. average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling. weight_col Column name column weights used averaging, country population. flat_extrap Logical value determining whether flat extrapolate using latest average missing rows data available. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. pred_col Column name store predicted value. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_average_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute data using simple averages — predict_average_fn","text":"data frame.","code":""},{"path":"/reference/predict_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a time series model to infill and project data — predict_forecast","title":"Use a time series model to infill and project data — predict_forecast","text":"predict_forecast() uses forecast package's forecast::forecast() methods generate predictions time series data. use longest contiguous observed values forecast certain number periods. function automatically detects latest observed values number missing values forecast, runs provided forecasting function observed data series.","code":""},{"path":"/reference/predict_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a time series model to infill and project data — predict_forecast","text":"","code":"predict_forecast(   df,   forecast_function,   response,   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   test_period = NULL,   test_period_flex = NULL,   group_col = \"iso3\",   group_models = TRUE,   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"all\", \"response\", \"predictors\", \"none\"),   type_col = NULL,   types = \"projected\",   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\") )"},{"path":"/reference/predict_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a time series model to infill and project data — predict_forecast","text":"df Data frame model data. forecast_function R function outputs forecast object coming forecast package. can directly pass forecast::forecast() function, can pass wrappers forecast::holt() forecast::ses(). response Column name response variable used input forecast function. ... Additional arguments passed forecast function. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. test_period Length period test RMChE. NULL, beginning end points group group_col compared. Otherwise, test_period must set integer n group, comparisons made end point n periods prior. test_period_flex Logical value indicating test_period less full length series, change error still calculated point. Defaults FALSE. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name column arrange data dplyr::arrange(), prior filtering latest contiguous time series producing forecast. used NULL, defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a time series model to infill and project data — predict_forecast","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_forecast_avg_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Use predict_forecast on groups to generate average trend and apply to original data — predict_forecast_avg_trend","title":"Use predict_forecast on groups to generate average trend and apply to original data — predict_forecast_avg_trend","text":"predict_forecast_avg_trend() uses time series forecasting methods fit model groups within data, bring fitted prediction back original data. function uses forecast::forecast(), full details explanation arguments can accept available . augury implementation details available predict_forecast(). function also allows inputting data type source information directly data frame type_col source_col specified respectively.","code":""},{"path":"/reference/predict_forecast_avg_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use predict_forecast on groups to generate average trend and apply to original data — predict_forecast_avg_trend","text":"","code":"predict_forecast_avg_trend(   df,   forecast_function,   response,   average_cols = NULL,   weight_col = NULL,   group_models = TRUE,   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   test_period = NULL,   test_period_flex = NULL,   group_col = \"iso3\",   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"predictors\", \"response\", \"all\", \"none\"),   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\") )"},{"path":"/reference/predict_forecast_avg_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use predict_forecast on groups to generate average trend and apply to original data — predict_forecast_avg_trend","text":"df Data frame model data. forecast_function R function outputs forecast object coming forecast package. can directly pass forecast::forecast() function, can pass wrappers forecast::holt() forecast::ses(). response Column name response variable used input forecast function. average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling. weight_col Column name column weights used averaging, country population. group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. ... Additional arguments passed forecast function. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. test_period Length period test RMChE. NULL, beginning end points group group_col compared. Otherwise, test_period must set integer n group, comparisons made end point n periods prior. test_period_flex Logical value indicating test_period less full length series, change error still calculated point. Defaults FALSE. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name column arrange data dplyr::arrange(), prior filtering latest contiguous time series producing forecast. used NULL, defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_forecast_avg_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use predict_forecast on groups to generate average trend and apply to original data — predict_forecast_avg_trend","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_forecast_avg_trend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use predict_forecast on groups to generate average trend and apply to original data — predict_forecast_avg_trend","text":"predict_..._avg_trend() functions need used carefully. Ensure average_cols variables formula match, formula variables average_cols numeric can averaged. Even though modeling use group_col, provided necessary used error metric calculations, provision types type_col. Similarly, sort_col necessary types, also needs average_cols error_correct, group_models, shift_trend going used.","code":""},{"path":"/reference/predict_forecast_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate prediction from model object — predict_forecast_data","title":"Generate prediction from model object — predict_forecast_data","text":"predict_forecast_data() generates prediction vector forecast object full data frame, putting prediction back data frame.","code":""},{"path":"/reference/predict_forecast_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate prediction from model object — predict_forecast_data","text":"","code":"predict_forecast_data(   df,   forecast_obj,   sort_col,   sort_descending,   pred_col,   pred_upper_col,   pred_lower_col )"},{"path":"/reference/predict_forecast_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate prediction from model object — predict_forecast_data","text":"df Data frame model data. forecast_obj Object class forecast output forecast:: family functions. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound.","code":""},{"path":"/reference/predict_forecast_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate prediction from model object — predict_forecast_data","text":"data frame.","code":""},{"path":"/reference/predict_general_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate prediction from model object — predict_general_data","title":"Generate prediction from model object — predict_general_data","text":"predict_general_data() generates prediction vector model object full data frame, putting prediction back data frame.","code":""},{"path":"/reference/predict_general_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate prediction from model object — predict_general_data","text":"","code":"predict_general_data(df, model, pred_col, pred_upper_col, pred_lower_col)"},{"path":"/reference/predict_general_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate prediction from model object — predict_general_data","text":"df Data frame model data. model R function outputs model object predict.model generic, stats::family() contains inverse link function linkinv predict.model() accepts se.fit = TRUE argument returns confidence intervals. includes stats::lm, stats::glm, lme4::lmer. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound.","code":""},{"path":"/reference/predict_general_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate prediction from model object — predict_general_data","text":"data frame.","code":""},{"path":"/reference/predict_general_mdl.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a generic R model to infill and project data — predict_general_mdl","title":"Use a generic R model to infill and project data — predict_general_mdl","text":"predict_general_mdl() uses general model object R fit model use model infill project dependent variable. flexible allow many general models used function. However, need fit certain criteria: model accepts formula data arguments. arguments can passed anonymously  .... returned object passed stats::family() returns inverse link function list linkinv. Must predict.model generic accepts se.fit = TRUE argument returns confidence intervals.","code":""},{"path":"/reference/predict_general_mdl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a generic R model to infill and project data — predict_general_mdl","text":"","code":"predict_general_mdl(   df,   model,   formula,   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   test_period = NULL,   test_period_flex = NULL,   group_col = \"iso3\",   group_models = FALSE,   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"all\", \"response\", \"predictors\", \"none\"),   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\"),   error_correct = FALSE,   error_correct_cols = NULL,   shift_trend = FALSE )"},{"path":"/reference/predict_general_mdl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a generic R model to infill and project data — predict_general_mdl","text":"df Data frame model data. model R function outputs model object predict.model generic, stats::family() contains inverse link function linkinv predict.model() accepts se.fit = TRUE argument returns confidence intervals. includes stats::lm, stats::glm, lme4::lmer. formula formula supplied model, y~x. ... arguments passed model function. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. test_period Length period test RMChE. NULL, beginning end points group group_col compared. Otherwise, test_period must set integer n group, comparisons made end point n periods prior. test_period_flex Logical value indicating test_period less full length series, change error still calculated point. Defaults FALSE. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_general_mdl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a generic R model to infill and project data — predict_general_mdl","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_general_mdl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use a generic R model to infill and project data — predict_general_mdl","text":"example, stats::lm() stats::glm()  fit criteria convenient wrappers models provided augury, additional model functions can used predict_general_mdl() fit criteria. function also allows inputting data type source information directly data frame type_col source_col specified respectively.","code":""},{"path":"/reference/predict_general_mdl_avg_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Use predict_general_mdl on groups to generate average trend and apply to original data — predict_general_mdl_avg_trend","title":"Use predict_general_mdl on groups to generate average trend and apply to original data — predict_general_mdl_avg_trend","text":"predict_general_mdl_avg_trend() uses general model object R fit model groups within data, bring fitted prediction back original data. function uses general modelling function R model fitting prediction, full details requirements available predict_general_mdl(). function also allows inputting data type source information directly data frame type_col source_col specified respectively.","code":""},{"path":"/reference/predict_general_mdl_avg_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use predict_general_mdl on groups to generate average trend and apply to original data — predict_general_mdl_avg_trend","text":"","code":"predict_general_mdl_avg_trend(   df,   model,   formula,   average_cols = NULL,   weight_col = NULL,   group_models = FALSE,   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   test_period = NULL,   test_period_flex = NULL,   group_col = \"iso3\",   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"predictors\", \"response\", \"all\", \"none\"),   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\"),   error_correct = FALSE,   error_correct_cols = NULL,   shift_trend = FALSE )"},{"path":"/reference/predict_general_mdl_avg_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use predict_general_mdl on groups to generate average trend and apply to original data — predict_general_mdl_avg_trend","text":"df Data frame model data. model R function outputs model object predict.model generic, stats::family() contains inverse link function linkinv predict.model() accepts se.fit = TRUE argument returns confidence intervals. includes stats::lm, stats::glm, lme4::lmer. formula formula supplied model, y~x. Variables defined formula used averaging. variable defined part average_cols, used within dplyr::group_by() prior averaging. part average_cols, must numeric column whose average taken. average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling. weight_col Column name column weights used averaging, country population. group_models Logical, whether run separate models group defined average_cols. sort_col part average_cols, used group models. ... arguments passed model function. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. test_period Length period test RMChE. NULL, beginning end points group group_col compared. Otherwise, test_period must set integer n group, comparisons made end point n periods prior. test_period_flex Logical value indicating test_period less full length series, change error still calculated point. Defaults FALSE. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". obs_filter String value form \"logical operator integer\" specifies replacing observations predicted values, done specific number observations. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":""},{"path":"/reference/predict_general_mdl_avg_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use predict_general_mdl on groups to generate average trend and apply to original data — predict_general_mdl_avg_trend","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_general_mdl_avg_trend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use predict_general_mdl on groups to generate average trend and apply to original data — predict_general_mdl_avg_trend","text":"predict_..._avg_trend() functions need used carefully. Ensure average_cols variables formula match, formula variables average_cols numeric can averaged. Even though modeling use group_col, provided necessary used error metric calculations, provision types type_col. Similarly, sort_col necessary types, also needs average_cols error_correct, group_models, shift_trend going used.","code":""},{"path":"/reference/predict_glm.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a generalized linear model to infill and project data — predict_glm","title":"Use a generalized linear model to infill and project data — predict_glm","text":"predict_glm() simple wrapper fits generalized linear model infill project data. details surrounding generalized linear model fitting, please see stats::glm() details augury function wraps around various arguments function accepts, please see predict_general_mdl().","code":""},{"path":"/reference/predict_glm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a generalized linear model to infill and project data — predict_glm","text":"","code":"predict_glm(   df,   formula,   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   group_col = \"iso3\",   group_models = FALSE,   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"all\", \"response\", \"predictors\", \"none\"),   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\"),   error_correct = FALSE,   error_correct_cols = NULL,   shift_trend = FALSE )"},{"path":"/reference/predict_glm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a generalized linear model to infill and project data — predict_glm","text":"df Data frame model data. formula formula supplied model, y~x. ... arguments passed model function. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_glm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a generalized linear model to infill and project data — predict_glm","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_glm_avg_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Use predict_glm on groups to generate average trend and apply to original data — predict_glm_avg_trend","title":"Use predict_glm on groups to generate average trend and apply to original data — predict_glm_avg_trend","text":"predict_glm_avg_trend() simple wrapper around predict_general_mdl_avg_trend(). details surrounding linear model fitting, please see stats::glm() details augury function wraps around various arguments function accepts, please see predict_general_mdl_avg_trend().","code":""},{"path":"/reference/predict_glm_avg_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use predict_glm on groups to generate average trend and apply to original data — predict_glm_avg_trend","text":"","code":"predict_glm_avg_trend(   df,   formula,   average_cols = NULL,   weight_col = NULL,   group_models = FALSE,   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   test_period = NULL,   test_period_flex = NULL,   group_col = \"iso3\",   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"predictors\", \"response\", \"all\", \"none\"),   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\"),   error_correct = FALSE,   error_correct_cols = NULL,   shift_trend = FALSE )"},{"path":"/reference/predict_glm_avg_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use predict_glm on groups to generate average trend and apply to original data — predict_glm_avg_trend","text":"df Data frame model data. formula formula supplied model, y~x. Variables defined formula used averaging. variable defined part average_cols, used within dplyr::group_by() prior averaging. part average_cols, must numeric column whose average taken. average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling. weight_col Column name column weights used averaging, country population. group_models Logical, whether run separate models group defined average_cols. sort_col part average_cols, used group models. ... arguments passed model function. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. test_period Length period test RMChE. NULL, beginning end points group group_col compared. Otherwise, test_period must set integer n group, comparisons made end point n periods prior. test_period_flex Logical value indicating test_period less full length series, change error still calculated point. Defaults FALSE. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". obs_filter String value form \"logical operator integer\" specifies replacing observations predicted values, done specific number observations. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":""},{"path":"/reference/predict_glm_avg_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use predict_glm on groups to generate average trend and apply to original data — predict_glm_avg_trend","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_glm_avg_trend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use predict_glm on groups to generate average trend and apply to original data — predict_glm_avg_trend","text":"predict_..._avg_trend() functions need used carefully. Ensure average_cols variables formula match, formula variables average_cols numeric can averaged. Even though modeling use group_col, provided necessary used error metric calculations, provision types type_col. Similarly, sort_col necessary types, also needs average_cols error_correct, group_models, shift_trend going used.","code":""},{"path":"/reference/predict_glmer.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a generalized linear mixed-effects model to infill and project data — predict_glmer","title":"Use a generalized linear mixed-effects model to infill and project data — predict_glmer","text":"predict_lmer() simple wrapper fits generalized linear mixed-effects model (GLMM) infill project data. details surrounding GLMM fitting, please see lme4::glmer() details augury function wraps around various arguments function accepts, please see predict_lme4().","code":""},{"path":"/reference/predict_glmer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a generalized linear mixed-effects model to infill and project data — predict_glmer","text":"","code":"predict_glmer(   df,   formula,   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   group_col = \"iso3\",   group_models = FALSE,   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"all\", \"response\", \"predictors\", \"none\"),   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\"),   error_correct = FALSE,   error_correct_cols = NULL,   shift_trend = FALSE )"},{"path":"/reference/predict_glmer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a generalized linear mixed-effects model to infill and project data — predict_glmer","text":"df Data frame model data. formula formula supplied model, y~x. ... arguments passed model function. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_glmer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a generalized linear mixed-effects model to infill and project data — predict_glmer","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_glmer_avg_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Use predict_glmer on groups to generate average trend and apply to original data — predict_glmer_avg_trend","title":"Use predict_glmer on groups to generate average trend and apply to original data — predict_glmer_avg_trend","text":"predict_glmer_avg_trend() simple wrapper around predict_lme4_avg_trend(). details surrounding generalized linear mixed effects model fitting, please see lme4::glmer details augury function wraps around various arguments function accepts, please see predict_lme4_avg_trend().","code":""},{"path":"/reference/predict_glmer_avg_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use predict_glmer on groups to generate average trend and apply to original data — predict_glmer_avg_trend","text":"","code":"predict_glmer_avg_trend(   df,   formula,   average_cols = NULL,   weight_col = NULL,   group_models = FALSE,   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   test_period = NULL,   test_period_flex = NULL,   group_col = NULL,   obs_filter = NULL,   sort_col = NULL,   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"predictors\", \"response\", \"all\", \"none\"),   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\"),   error_correct = FALSE,   error_correct_cols = NULL,   shift_trend = FALSE )"},{"path":"/reference/predict_glmer_avg_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use predict_glmer on groups to generate average trend and apply to original data — predict_glmer_avg_trend","text":"df Data frame model data. formula formula supplied model, y~x. average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling. weight_col Column name column weights used averaging, country population. group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. ... arguments passed model function. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. test_period Length period test RMChE. NULL, beginning end points group group_col compared. Otherwise, test_period must set integer n group, comparisons made end point n periods prior. test_period_flex Logical value indicating test_period less full length series, change error still calculated point. Defaults FALSE. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_glmer_avg_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use predict_glmer on groups to generate average trend and apply to original data — predict_glmer_avg_trend","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_holt.html","id":null,"dir":"Reference","previous_headings":"","what":"Use Holt's linear trend exponential smoothing to forecast data — predict_holt","title":"Use Holt's linear trend exponential smoothing to forecast data — predict_holt","text":"predict_holt() simple wrapper uses exponential smoothing linear trend forecast data. details surrounding model fitting, please see forecast::holt() details augury function wraps around various arguments function accepts, please see predict_forecast().","code":""},{"path":"/reference/predict_holt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use Holt's linear trend exponential smoothing to forecast data — predict_holt","text":"","code":"predict_holt(   df,   response,   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   group_col = \"iso3\",   group_models = TRUE,   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"all\", \"response\", \"predictors\", \"none\"),   type_col = NULL,   types = \"projected\",   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\") )"},{"path":"/reference/predict_holt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use Holt's linear trend exponential smoothing to forecast data — predict_holt","text":"df Data frame model data. response Column name response variable used input forecast function. ... Additional arguments passed forecast function. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name column arrange data dplyr::arrange(), prior filtering latest contiguous time series producing forecast. used NULL, defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_holt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use Holt's linear trend exponential smoothing to forecast data — predict_holt","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_holt_avg_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Use predict_holt on groups to generate average trend and apply to original data — predict_holt_avg_trend","title":"Use predict_holt on groups to generate average trend and apply to original data — predict_holt_avg_trend","text":"predict_holt_avg_trend() simple wrapper around predict_forecast_avg_trend(). details surrounding forecasting, please see forecast::holt() details augury function wraps around various arguments function accepts, please see predict_forecast_avg_trend().","code":""},{"path":"/reference/predict_holt_avg_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use predict_holt on groups to generate average trend and apply to original data — predict_holt_avg_trend","text":"","code":"predict_holt_avg_trend(   df,   response,   average_cols = NULL,   weight_col = NULL,   group_models = TRUE,   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   test_period = NULL,   test_period_flex = NULL,   group_col = \"iso3\",   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"predictors\", \"response\", \"all\", \"none\"),   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\") )"},{"path":"/reference/predict_holt_avg_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use predict_holt on groups to generate average trend and apply to original data — predict_holt_avg_trend","text":"df Data frame model data. response Column name response variable used input forecast function. average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling. weight_col Column name column weights used averaging, country population. group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. ... Additional arguments passed forecast function. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. test_period Length period test RMChE. NULL, beginning end points group group_col compared. Otherwise, test_period must set integer n group, comparisons made end point n periods prior. test_period_flex Logical value indicating test_period less full length series, change error still calculated point. Defaults FALSE. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name column arrange data dplyr::arrange(), prior filtering latest contiguous time series producing forecast. used NULL, defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_holt_avg_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use predict_holt on groups to generate average trend and apply to original data — predict_holt_avg_trend","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_holt_avg_trend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use predict_holt on groups to generate average trend and apply to original data — predict_holt_avg_trend","text":"predict_..._avg_trend() functions need used carefully. Ensure average_cols variables formula match, formula variables average_cols numeric can averaged. Even though modeling use group_col, provided necessary used error metric calculations, provision types type_col. Similarly, sort_col necessary types, also needs average_cols error_correct, group_models, shift_trend going used.","code":""},{"path":"/reference/predict_inla.html","id":null,"dir":"Reference","previous_headings":"","what":"Use Bayesian analysis of additive models to infill and project data — predict_inla","title":"Use Bayesian analysis of additive models to infill and project data — predict_inla","text":"predict_inla() uses Integrated Nested Laplace approximation fit model use model infill project dependent variable. function uses INLA::inla() perform model fitting prediction, full details explanation arguments can accept available page. function also allows inputting data type source information directly data frame type_col source_col specified respectively.","code":""},{"path":"/reference/predict_inla.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use Bayesian analysis of additive models to infill and project data — predict_inla","text":"","code":"predict_inla(   df,   formula,   control.predictor = list(compute = TRUE),   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   test_period = NULL,   test_period_flex = NULL,   group_col = \"iso3\",   group_models = FALSE,   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"predictors\", \"response\", \"all\", \"none\"),   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\"),   error_correct = FALSE,   error_correct_cols = NULL,   shift_trend = FALSE )"},{"path":"/reference/predict_inla.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use Bayesian analysis of additive models to infill and project data — predict_inla","text":"df Data frame model data. formula formula supplied model, y~x. control.predictor Used set compute = TRUE ensure posterior marginals fitted values obtained mean standard deviation fitted values returned use infilling predictions. Additional arguments can passed control.predictor list, must always include compute = TRUE. See INLA::control.predictor() details. ... Additional arguments passed INLA::inla(). ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. test_period Length period test RMChE. NULL, beginning end points group group_col compared. Otherwise, test_period must set integer n group, comparisons made end point n periods prior. test_period_flex Logical value indicating test_period less full length series, change error still calculated point. Defaults FALSE. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model. default, observations missing predictors removed, although can also remove rows missing dependent independent variables, filtering . Model prediction fitting done one pass INLA::inla(), predictions observations missing dependent variables removed. type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_inla.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use Bayesian analysis of additive models to infill and project data — predict_inla","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_inla_avg_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Use predict_inla on groups to generate average trend and apply to original data — predict_inla_avg_trend","title":"Use predict_inla on groups to generate average trend and apply to original data — predict_inla_avg_trend","text":"predict_inla_avg_trend() uses Integrated Nested Laplace approximation fit model groups within data, bring fitted prediction back original data. function uses INLA::inla() perform model fitting prediction, full details explanation arguments can accept available page. function also allows inputting data type source information directly data frame type_col source_col specified respectively.","code":""},{"path":"/reference/predict_inla_avg_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use predict_inla on groups to generate average trend and apply to original data — predict_inla_avg_trend","text":"","code":"predict_inla_avg_trend(   df,   formula,   average_cols = NULL,   weight_col = NULL,   group_models = FALSE,   control.predictor = list(compute = TRUE),   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   test_period = NULL,   test_period_flex = NULL,   group_col = \"iso3\",   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"predictors\", \"response\", \"all\", \"none\"),   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\"),   error_correct = FALSE,   error_correct_cols = NULL,   shift_trend = FALSE )"},{"path":"/reference/predict_inla_avg_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use predict_inla on groups to generate average trend and apply to original data — predict_inla_avg_trend","text":"df Data frame model data. formula formula supplied model, y~x. average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling. weight_col Column name column weights used averaging, country population. group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. control.predictor Used set compute = TRUE ensure posterior marginals fitted values obtained mean standard deviation fitted values returned use infilling predictions. Additional arguments can passed control.predictor list, must always include compute = TRUE. See INLA::control.predictor() details. ... Additional arguments passed INLA::inla(). ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. test_period Length period test RMChE. NULL, beginning end points group group_col compared. Otherwise, test_period must set integer n group, comparisons made end point n periods prior. test_period_flex Logical value indicating test_period less full length series, change error still calculated point. Defaults FALSE. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model. default, observations missing predictors removed, although can also remove rows missing dependent independent variables, filtering . Model prediction fitting done one pass INLA::inla(), predictions observations missing dependent variables removed. type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_inla_avg_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use predict_inla on groups to generate average trend and apply to original data — predict_inla_avg_trend","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_inla_avg_trend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use predict_inla on groups to generate average trend and apply to original data — predict_inla_avg_trend","text":"predict_..._avg_trend() functions need used carefully. Ensure average_cols variables formula match, formula variables average_cols numeric can averaged. Even though modeling use group_col, provided necessary used error metric calculations, provision types type_col. Similarly, sort_col necessary types, also needs average_cols error_correct, group_models, shift_trend going used.","code":""},{"path":"/reference/predict_inla_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate prediction from an INLA output object — predict_inla_data","title":"Generate prediction from an INLA output object — predict_inla_data","text":"predict_inla_data() generates prediction vector INLA::inla() output object, putting prediction back data frame.","code":""},{"path":"/reference/predict_inla_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate prediction from an INLA output object — predict_inla_data","text":"","code":"predict_inla_data(df, model, pred_col, pred_upper_col, pred_lower_col)"},{"path":"/reference/predict_inla_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate prediction from an INLA output object — predict_inla_data","text":"df Data frame model data. model INLA model object returned INLA::inla() contains summary.fitted.values. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound.","code":""},{"path":"/reference/predict_inla_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate prediction from an INLA output object — predict_inla_data","text":"data frame.","code":""},{"path":"/reference/predict_inla_me.html","id":null,"dir":"Reference","previous_headings":"","what":"Use INLA for mixed effects modeling for prediction — predict_inla_me","title":"Use INLA for mixed effects modeling for prediction — predict_inla_me","text":"predict_inla_me() uses Integrated Nested Laplace approximation fit model use model infill project dependent variable. See predict_inla() details, function defaults fitting mixed-effects model Socio-Demographic Index life-expectancy birth (scaled) used covariates second-order random walk time process incorporated.","code":""},{"path":"/reference/predict_inla_me.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use INLA for mixed effects modeling for prediction — predict_inla_me","text":"","code":"predict_inla_me(   df,   model = \"rw2\",       formula = stats::as.formula(sprintf(\"value ~ sdi_scaled + e0_scaled + f(region, model = 'iid') + f(year, model = '%s')\",     model)),   control.predictor = list(compute = TRUE),   family = \"gaussian\",   control.inla = list(strategy = \"laplace\"),   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   group_col = \"iso3\",   group_models = FALSE,   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"predictors\", \"response\", \"all\", \"none\"),   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\"),   error_correct = TRUE,   error_correct_cols = \"iso3\",   shift_trend = FALSE )"},{"path":"/reference/predict_inla_me.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use INLA for mixed effects modeling for prediction — predict_inla_me","text":"df Data frame model data. model Argument passed INLA::f() define time series model used default formula. Defaults \"rw2\". formula formula supplied model, y~x. control.predictor Used set compute = TRUE ensure posterior marginals fitted values obtained mean standard deviation fitted values returned use infilling predictions. Additional arguments can passed control.predictor list, must always include compute = TRUE. See INLA::control.predictor() details. family string indicating likelihood family. default gaussian identity link. See names(INLA::inla.model()$likelihood) list possible alternatives use INLA::inla.doc() detailed docs individual families. control.inla See INLA::control.inla() details. ... Additional arguments passed INLA::inla(). ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model. default, observations missing predictors removed, although can also remove rows missing dependent independent variables, filtering . Model prediction fitting done one pass INLA::inla(), predictions observations missing dependent variables removed. type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_inla_me.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use INLA for mixed effects modeling for prediction — predict_inla_me","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_inla_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Use INLA for time series prediction — predict_inla_ts","title":"Use INLA for time series prediction — predict_inla_ts","text":"predict_inla_ts() uses Integrated Nested Laplace approximation fit model use model infill project dependent variable. See predict_inla() details, function defaults fitting second-order random walk covariates group individually.","code":""},{"path":"/reference/predict_inla_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use INLA for time series prediction — predict_inla_ts","text":"","code":"predict_inla_ts(   df,   model = \"rw2\",   formula = stats::as.formula(sprintf(\"value ~ f(year, model = '%s')\", model)),   family = \"gaussian\",   control.predictor = list(compute = TRUE),   control.inla = list(strategy = \"laplace\"),   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   group_col = \"iso3\",   group_models = TRUE,   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"predictors\", \"response\", \"all\", \"none\"),   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\"),   error_correct = FALSE,   error_correct_cols = NULL,   shift_trend = FALSE )"},{"path":"/reference/predict_inla_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use INLA for time series prediction — predict_inla_ts","text":"df Data frame model data. model Argument passed INLA::f() define time series model used default formula. Defaults \"rw2\". formula formula supplied model, y~x. family string indicating likelihood family. default gaussian identity link. See names(INLA::inla.model()$likelihood) list possible alternatives use INLA::inla.doc() detailed docs individual families. control.predictor Used set compute = TRUE ensure posterior marginals fitted values obtained mean standard deviation fitted values returned use infilling predictions. Additional arguments can passed control.predictor list, must always include compute = TRUE. See INLA::control.predictor() details. control.inla See INLA::control.inla() details. ... Additional arguments passed INLA::inla(). ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model. default, observations missing predictors removed, although can also remove rows missing dependent independent variables, filtering . Model prediction fitting done one pass INLA::inla(), predictions observations missing dependent variables removed. type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_inla_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use INLA for time series prediction — predict_inla_ts","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a linear model to infill and project data — predict_lm","title":"Use a linear model to infill and project data — predict_lm","text":"predict_lm() simple wrapper fits linear model infill project data. details surrounding linear model fitting, please see stats::lm() details augury function wraps around various arguments function accepts, please see predict_general_mdl().","code":""},{"path":"/reference/predict_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a linear model to infill and project data — predict_lm","text":"","code":"predict_lm(   df,   formula,   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   group_col = \"iso3\",   group_models = FALSE,   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"all\", \"response\", \"predictors\", \"none\"),   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\"),   error_correct = FALSE,   error_correct_cols = NULL,   shift_trend = FALSE )"},{"path":"/reference/predict_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a linear model to infill and project data — predict_lm","text":"df Data frame model data. formula formula supplied model, y~x. ... arguments passed model function. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a linear model to infill and project data — predict_lm","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_lm_avg_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Use predict_lm on groups to generate average trend and apply to original data — predict_lm_avg_trend","title":"Use predict_lm on groups to generate average trend and apply to original data — predict_lm_avg_trend","text":"predict_lm_avg_trend() simple wrapper around predict_general_mdl_avg_trend(). details surrounding linear model fitting, please see stats::lm() details augury function wraps around various arguments function accepts, please see predict_general_mdl_avg_trend().","code":""},{"path":"/reference/predict_lm_avg_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use predict_lm on groups to generate average trend and apply to original data — predict_lm_avg_trend","text":"","code":"predict_lm_avg_trend(   df,   formula,   average_cols = NULL,   weight_col = NULL,   group_models = FALSE,   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   test_period = NULL,   test_period_flex = NULL,   group_col = \"iso3\",   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"predictors\", \"response\", \"all\", \"none\"),   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\"),   error_correct = FALSE,   error_correct_cols = NULL,   shift_trend = FALSE )"},{"path":"/reference/predict_lm_avg_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use predict_lm on groups to generate average trend and apply to original data — predict_lm_avg_trend","text":"df Data frame model data. formula formula supplied model, y~x. Variables defined formula used averaging. variable defined part average_cols, used within dplyr::group_by() prior averaging. part average_cols, must numeric column whose average taken. average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling. weight_col Column name column weights used averaging, country population. group_models Logical, whether run separate models group defined average_cols. sort_col part average_cols, used group models. ... arguments passed model function. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. test_period Length period test RMChE. NULL, beginning end points group group_col compared. Otherwise, test_period must set integer n group, comparisons made end point n periods prior. test_period_flex Logical value indicating test_period less full length series, change error still calculated point. Defaults FALSE. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". obs_filter String value form \"logical operator integer\" specifies replacing observations predicted values, done specific number observations. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":""},{"path":"/reference/predict_lm_avg_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use predict_lm on groups to generate average trend and apply to original data — predict_lm_avg_trend","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_lm_avg_trend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use predict_lm on groups to generate average trend and apply to original data — predict_lm_avg_trend","text":"predict_..._avg_trend() functions need used carefully. Ensure average_cols variables formula match, formula variables average_cols numeric can averaged. Even though modeling use group_col, provided necessary used error metric calculations, provision types type_col. Similarly, sort_col necessary types, also needs average_cols error_correct, group_models, shift_trend going used.","code":""},{"path":"/reference/predict_lme4.html","id":null,"dir":"Reference","previous_headings":"","what":"Use mixed models to infill and project data — predict_lme4","title":"Use mixed models to infill and project data — predict_lme4","text":"predict_lme4() uses mixed models lme4 fit model use model infill project dependent variable. flexible allow mixed model available lme4 packaged used function.","code":""},{"path":"/reference/predict_lme4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use mixed models to infill and project data — predict_lme4","text":"","code":"predict_lme4(   df,   model,   formula,   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   test_period = NULL,   test_period_flex = NULL,   group_col = \"iso3\",   group_models = FALSE,   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"all\", \"response\", \"predictors\", \"none\"),   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\"),   error_correct = FALSE,   error_correct_cols = NULL,   shift_trend = FALSE )"},{"path":"/reference/predict_lme4.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use mixed models to infill and project data — predict_lme4","text":"df Data frame model data. model lme4 function outputs merMod object can passed merTools::predictInterval(). one lme4::lmer(), lme4::glmer(), lme4::nlmer(). formula formula supplied model, y~x. ... arguments passed model function. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. test_period Length period test RMChE. NULL, beginning end points group group_col compared. Otherwise, test_period must set integer n group, comparisons made end point n periods prior. test_period_flex Logical value indicating test_period less full length series, change error still calculated point. Defaults FALSE. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_lme4.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use mixed models to infill and project data — predict_lme4","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_lme4.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use mixed models to infill and project data — predict_lme4","text":"Linear mixed models: lme4::lmer() Generalized linear mixed models: lme4::glmer() Nonlinear mixed models: lme4::nlmer()","code":""},{"path":"/reference/predict_lme4_avg_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Use predict_lme4 on groups to generate average trend and apply to original data — predict_lme4_avg_trend","title":"Use predict_lme4 on groups to generate average trend and apply to original data — predict_lme4_avg_trend","text":"predict_lme4_avg_trend() uses mixed models lme4 fit model groups within data, bring fitted prediction back original data. Full details available mixed models can found lme4 package page implementation augury predict_lme4(). function also allows inputting data type source information directly data frame type_col source_col specified respectively.","code":""},{"path":"/reference/predict_lme4_avg_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use predict_lme4 on groups to generate average trend and apply to original data — predict_lme4_avg_trend","text":"","code":"predict_lme4_avg_trend(   df,   model,   formula,   average_cols = NULL,   weight_col = NULL,   group_models = FALSE,   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   test_period = NULL,   test_period_flex = NULL,   group_col = \"iso3\",   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"predictors\", \"response\", \"all\", \"none\"),   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\"),   error_correct = FALSE,   error_correct_cols = NULL,   shift_trend = FALSE )"},{"path":"/reference/predict_lme4_avg_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use predict_lme4 on groups to generate average trend and apply to original data — predict_lme4_avg_trend","text":"df Data frame model data. model lme4 function outputs merMod object can passed merTools::predictInterval(). one lme4::lmer(), lme4::glmer(), lme4::nlmer(). formula formula supplied model, y~x. average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling. weight_col Column name column weights used averaging, country population. group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. ... arguments passed model function. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. test_period Length period test RMChE. NULL, beginning end points group group_col compared. Otherwise, test_period must set integer n group, comparisons made end point n periods prior. test_period_flex Logical value indicating test_period less full length series, change error still calculated point. Defaults FALSE. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_lme4_avg_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use predict_lme4 on groups to generate average trend and apply to original data — predict_lme4_avg_trend","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_lme4_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate prediction from model object — predict_lme4_data","title":"Generate prediction from model object — predict_lme4_data","text":"predict_lme4_data() generates prediction vector merMod object full data frame, putting prediction back data frame.","code":""},{"path":"/reference/predict_lme4_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate prediction from model object — predict_lme4_data","text":"","code":"predict_lme4_data(df, model, pred_col, pred_upper_col, pred_lower_col)"},{"path":"/reference/predict_lme4_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate prediction from model object — predict_lme4_data","text":"df Data frame model data. model lme4 function outputs merMod object can passed merTools::predictInterval(). one lme4::lmer(), lme4::glmer(), lme4::nlmer(). pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound.","code":""},{"path":"/reference/predict_lme4_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate prediction from model object — predict_lme4_data","text":"data frame.","code":""},{"path":"/reference/predict_lmer.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a linear mixed-effects model to infill and project data — predict_lmer","title":"Use a linear mixed-effects model to infill and project data — predict_lmer","text":"predict_lmer() simple wrapper fits linear mixed-effects model (LMM) infill project data. details surrounding LMM fitting, please see lme4::lmer() details augury function wraps around various arguments function accepts, please see predict_lme4().","code":""},{"path":"/reference/predict_lmer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a linear mixed-effects model to infill and project data — predict_lmer","text":"","code":"predict_lmer(   df,   formula,   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   group_col = \"iso3\",   group_models = FALSE,   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"all\", \"response\", \"predictors\", \"none\"),   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\"),   error_correct = FALSE,   error_correct_cols = NULL,   shift_trend = FALSE )"},{"path":"/reference/predict_lmer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a linear mixed-effects model to infill and project data — predict_lmer","text":"df Data frame model data. formula formula supplied model, y~x. ... arguments passed model function. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_lmer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a linear mixed-effects model to infill and project data — predict_lmer","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_lmer_avg_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Use predict_lmer on groups to generate average trend and apply to original data — predict_lmer_avg_trend","title":"Use predict_lmer on groups to generate average trend and apply to original data — predict_lmer_avg_trend","text":"predict_lmer_avg_trend() simple wrapper around predict_lme4_avg_trend(). details surrounding linear mixed effects model fitting, please see lme4::lmer details augury function wraps around various arguments function accepts, please see predict_lme4_avg_trend().","code":""},{"path":"/reference/predict_lmer_avg_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use predict_lmer on groups to generate average trend and apply to original data — predict_lmer_avg_trend","text":"","code":"predict_lmer_avg_trend(   df,   formula,   average_cols = NULL,   weight_col = NULL,   group_models = FALSE,   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   test_period = NULL,   test_period_flex = NULL,   group_col = \"iso3\",   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"predictors\", \"response\", \"all\", \"none\"),   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\"),   error_correct = FALSE,   error_correct_cols = NULL,   shift_trend = FALSE )"},{"path":"/reference/predict_lmer_avg_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use predict_lmer on groups to generate average trend and apply to original data — predict_lmer_avg_trend","text":"df Data frame model data. formula formula supplied model, y~x. average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling. weight_col Column name column weights used averaging, country population. group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. ... arguments passed model function. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. test_period Length period test RMChE. NULL, beginning end points group group_col compared. Otherwise, test_period must set integer n group, comparisons made end point n periods prior. test_period_flex Logical value indicating test_period less full length series, change error still calculated point. Defaults FALSE. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_lmer_avg_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use predict_lmer on groups to generate average trend and apply to original data — predict_lmer_avg_trend","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_nlmer.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a non-linear mixed-effects model to infill and project data — predict_nlmer","title":"Use a non-linear mixed-effects model to infill and project data — predict_nlmer","text":"predict_nlmer() simple wrapper fits non-linear mixed-effects model (GLMM) infill project data. details surrounding GLMM fitting, please see lme4::nlmer() details augury function wraps around various arguments function accepts, please see predict_lme4().","code":""},{"path":"/reference/predict_nlmer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a non-linear mixed-effects model to infill and project data — predict_nlmer","text":"","code":"predict_nlmer(   df,   formula,   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   group_col = \"iso3\",   group_models = FALSE,   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"all\", \"response\", \"predictors\", \"none\"),   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\"),   error_correct = FALSE,   error_correct_cols = NULL,   shift_trend = FALSE )"},{"path":"/reference/predict_nlmer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a non-linear mixed-effects model to infill and project data — predict_nlmer","text":"df Data frame model data. formula formula supplied model, y~x. ... arguments passed model function. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_nlmer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a non-linear mixed-effects model to infill and project data — predict_nlmer","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_nlmer_avg_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Use predict_nlmer on groups to generate average trend and apply to original data — predict_nlmer_avg_trend","title":"Use predict_nlmer on groups to generate average trend and apply to original data — predict_nlmer_avg_trend","text":"predict_nlmer_avg_trend() simple wrapper around predict_lme4_avg_trend(). details surrounding generalized linear mixed effects model fitting, please see lme4::nlmer details augury function wraps around various arguments function accepts, please see predict_lme4_avg_trend().","code":""},{"path":"/reference/predict_nlmer_avg_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use predict_nlmer on groups to generate average trend and apply to original data — predict_nlmer_avg_trend","text":"","code":"predict_nlmer_avg_trend(   df,   formula,   average_cols = NULL,   weight_col = NULL,   group_models = FALSE,   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   test_period = NULL,   test_period_flex = NULL,   group_col = NULL,   obs_filter = NULL,   sort_col = NULL,   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"predictors\", \"response\", \"all\", \"none\"),   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\"),   error_correct = FALSE,   error_correct_cols = NULL,   shift_trend = FALSE )"},{"path":"/reference/predict_nlmer_avg_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use predict_nlmer on groups to generate average trend and apply to original data — predict_nlmer_avg_trend","text":"df Data frame model data. formula formula supplied model, y~x. average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling. weight_col Column name column weights used averaging, country population. group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. ... arguments passed model function. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. test_period Length period test RMChE. NULL, beginning end points group group_col compared. Otherwise, test_period must set integer n group, comparisons made end point n periods prior. test_period_flex Logical value indicating test_period less full length series, change error still calculated point. Defaults FALSE. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none. error_correct Logical value indicating whether whether mean error used adjust predicted values. TRUE, mean error observed predicted data points used adjust predictions. error_correct_cols NULL, mean error used within groups instead overall mean error. error_correct_cols Column names data frame group applying error correction predicted values. shift_trend Logical value specifying whether shift predictions trend matches last observation. error_correct shift_trend TRUE, shift_trend takes precedence.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_nlmer_avg_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use predict_nlmer on groups to generate average trend and apply to original data — predict_nlmer_avg_trend","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_ses.html","id":null,"dir":"Reference","previous_headings":"","what":"Use simple exponential smoothing to forecast data — predict_ses","title":"Use simple exponential smoothing to forecast data — predict_ses","text":"predict_ses() simple wrapper uses simple exponential smoothing forecast data. details surrounding model fitting, please see forecast::holt() details augury function wraps around various arguments function accepts, please see predict_forecast().","code":""},{"path":"/reference/predict_ses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use simple exponential smoothing to forecast data — predict_ses","text":"","code":"predict_ses(   df,   response,   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   group_col = \"iso3\",   group_models = TRUE,   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"all\", \"response\", \"predictors\", \"none\"),   type_col = NULL,   types = \"projected\",   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\") )"},{"path":"/reference/predict_ses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use simple exponential smoothing to forecast data — predict_ses","text":"df Data frame model data. response Column name response variable used input forecast function. ... Additional arguments passed forecast function. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name column arrange data dplyr::arrange(), prior filtering latest contiguous time series producing forecast. used NULL, defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_ses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use simple exponential smoothing to forecast data — predict_ses","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_ses_avg_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Use predict_ses on groups to generate average trend and apply to original data — predict_ses_avg_trend","title":"Use predict_ses on groups to generate average trend and apply to original data — predict_ses_avg_trend","text":"predict_ses_avg_trend() simple wrapper around predict_forecast_avg_trend(). details surrounding forecasting, please see forecast::ses() details augury function wraps around various arguments function accepts, please see predict_forecast_avg_trend().","code":""},{"path":"/reference/predict_ses_avg_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use predict_ses on groups to generate average trend and apply to original data — predict_ses_avg_trend","text":"","code":"predict_ses_avg_trend(   df,   response,   average_cols = NULL,   weight_col = NULL,   group_models = FALSE,   ...,   ret = c(\"df\", \"all\", \"error\", \"model\"),   scale = NULL,   probit = FALSE,   test_col = NULL,   test_period = NULL,   test_period_flex = NULL,   group_col = \"iso3\",   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   pred_upper_col = \"pred_upper\",   pred_lower_col = \"pred_lower\",   upper_col = \"upper\",   lower_col = \"lower\",   filter_na = c(\"predictors\", \"response\", \"all\", \"none\"),   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"all\", \"none\") )"},{"path":"/reference/predict_ses_avg_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use predict_ses on groups to generate average trend and apply to original data — predict_ses_avg_trend","text":"df Data frame model data. response Column name response variable used input forecast function. average_cols Column name(s) column(s) use grouping data averaging, regions. missing, uses global average data infilling. weight_col Column name column weights used averaging, country population. group_models Logical, TRUE, fits predicts models individually onto group_col. FALSE, general model fit across entire data frame. ... Additional arguments passed forecast function. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. scale Either NULL numeric value. numeric value provided, response variable scaled value passed scale prior model fitting prior probit transformation, can used put response onto 0 1 scale. Scaling done dividing response scale using scale_transform() function. response, well fitted values confidence bounds unscaled prior error calculation returning user. probit Logical value whether probit transform response prior model fitting. Probit transformation performed scaling determined scale prior model fitting. response, well fitted values confidence bounds untransformed prior error calculation returning user. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. test_period Length period test RMChE. NULL, beginning end points group group_col compared. Otherwise, test_period must set integer n group, comparisons made end point n periods prior. test_period_flex Logical value indicating test_period less full length series, change error still calculated point. Defaults FALSE. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name column arrange data dplyr::arrange(), prior filtering latest contiguous time series producing forecast. used NULL, defaults \"year\". sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. pred_upper_col Column name store upper bound confidence interval generated predict_... function. stores full set generated values upper bound. pred_lower_col Column name store lower bound confidence interval generated predict_... function. stores full set generated values lower bound. upper_col Column name contains upper bound information, including upper bound input data model. Values pred_upper_col put column exact way response filled pred based replace_na (missing value response). lower_col Column name contains lower bound information, including lower bound input data model. Values pred_lower_col put column exact way response filled pred based replace_na (missing value response). filter_na Character value specifying , , filter NA values dataset prior applying model.  default, observations missing values removed, although can also remove rows missing dependent independent variables, filtering . type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced fitted values. Defaults replacing missing values, can used replace values none.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_ses_avg_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use predict_ses on groups to generate average trend and apply to original data — predict_ses_avg_trend","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_ses_avg_trend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use predict_ses on groups to generate average trend and apply to original data — predict_ses_avg_trend","text":"predict_..._avg_trend() functions need used carefully. Ensure average_cols variables formula match, formula variables average_cols numeric can averaged. Even though modeling use group_col, provided necessary used error metric calculations, provision types type_col. Similarly, sort_col necessary types, also needs average_cols error_correct, group_models, shift_trend going used.","code":""},{"path":"/reference/predict_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Use linear interpolation and flat extrapolation to infill data — predict_simple","title":"Use linear interpolation and flat extrapolation to infill data — predict_simple","text":"predict_simple() simple linear interpolation /flat extrapolation column using zoo::na.approx(). Similar predict functions, also allows filling type source necessary. However, provide confidence bounds estimates, like predict_... model-based functions provide.","code":""},{"path":"/reference/predict_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use linear interpolation and flat extrapolation to infill data — predict_simple","text":"","code":"predict_simple(   df,   model = c(\"forward\", \"all\", \"flat_extrap\", \"linear_interp\", \"back_extrap\",     \"both_extrap\"),   col = \"value\",   ret = c(\"df\", \"all\", \"error\"),   test_col = NULL,   test_period = NULL,   test_period_flex = NULL,   group_col = \"iso3\",   obs_filter = NULL,   sort_col = \"year\",   sort_descending = FALSE,   pred_col = \"pred\",   type_col = NULL,   types = c(\"imputed\", \"imputed\", \"projected\"),   source_col = NULL,   source = NULL,   scenario_detail_col = NULL,   scenario_detail = NULL,   replace_obs = c(\"missing\", \"none\") )"},{"path":"/reference/predict_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use linear interpolation and flat extrapolation to infill data — predict_simple","text":"df Data frame model data. model Type simple extrapolation interpolation perform: forward: Just flat_extrap linear_interp. (default) : flat_extrap, linear_interp, back_extrap flat_extrap: Flat extrapolation latest observed point. linear_interp: Linear interpolation observed data points. back_extrap: Flat extrapolation first observed data point backwards. both_extrap: flat_extrap back_extrap. col Name column extrapolate/interpolate. ret Character vector specifying values function returns. Defaults returning data frame, can return vector model error, model list 3 components. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. test_period Length period test RMChE. NULL, beginning end points group group_col compared. Otherwise, test_period must set integer n group, comparisons made end point n periods prior. test_period_flex Logical value indicating test_period less full length series, change error still calculated point. Defaults FALSE. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". predict_simple(), first value sort_col passed zoo::na.approx() xout ensure linear interpolation based sort_col indexing rather default data frame indexing. sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE. pred_col Column name store predicted value. type_col Column name specifying data type. types Vector length 3 provides type provide data produced model. values used fill type values dependent variable missing. first value given missing observations precede first observation, second last observation, third following final observation. source_col Column name containing source information data frame. provided, argument source used fill predictions filled missing data. source Source add missing values. scenario_detail_col Column name containing scenario_detail information data frame. provided, argument scenario_detail used fill prediction shave filled missing data. scenario_detail Scenario details add missing values (usually name model used generate projection, optionally relevant parameters). replace_obs Character value specifying , , observations replaced infilled values. default, replaces missing values col set \"none\" col changed.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use linear interpolation and flat extrapolation to infill data — predict_simple","text":"Depending value passed ret, either data frame predicted data, vector errors model_error(), fitted model, list 3.","code":""},{"path":"/reference/predict_simple.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use linear interpolation and flat extrapolation to infill data — predict_simple","text":"Depending value model passed function, linear interpolation, flat extrapolation, used data.","code":""},{"path":"/reference/predict_simple_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Linearly interpolate data — predict_simple_fn","title":"Linearly interpolate data — predict_simple_fn","text":"predict_simple_fn() simple linear interpolation flat extrapolation specified columnn data frame using zoo::na.approx().","code":""},{"path":"/reference/predict_simple_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linearly interpolate data — predict_simple_fn","text":"","code":"predict_simple_fn(   df,   model,   col,   test_col = NULL,   group_col = NULL,   obs_filter = NULL,   pred_col = \"pred\",   sort_col = NULL,   sort_descending = FALSE )"},{"path":"/reference/predict_simple_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linearly interpolate data — predict_simple_fn","text":"df Data frame model data. model Type simple extrapolation interpolation perform: forward: Just flat_extrap linear_interp. (default) : flat_extrap, linear_interp, back_extrap flat_extrap: Flat extrapolation latest observed point. linear_interp: Linear interpolation observed data points. back_extrap: Flat extrapolation first observed data point backwards. both_extrap: flat_extrap back_extrap. col Name column extrapolate/interpolate. test_col Name logical column specifying response values remove testing model's predictive accuracy. NULL, ignored. See model_error() details methods metrics returned. group_col Column name(s) group(s) use dplyr::group_by() supplying type, calculating mean absolute scaled error data involving time series, group_models, fitting predicting models . NULL, used. Defaults \"iso3\". obs_filter String value form \"logical operator integer\" specifies number observations required fit model replace observations predicted values. done conjunction group_col. , group_col = \"iso3\" obs_filter = \">= 5\", model, predictions used iso3 vales 5 observations. Possible logical operators use >, >=, <, <=, ==, !=. pred_col Column name store predicted value. sort_col Column name(s) use dplyr::arrange() data prior supplying type calculating mean absolute scaled error data involving time series. NULL, used. Defaults \"year\". predict_simple(), first value sort_col passed zoo::na.approx() xout ensure linear interpolation based sort_col indexing rather default data frame indexing. sort_descending Logical value whether sorted values sort_col sorted descending order. Defaults FALSE.","code":"If `group_models = FALSE`, then `obs_filter` is only used to determine when predicted values replace observed values but **is not** used to restrict values from being used in model fitting. If `group_models = TRUE`, then a model is only fit for a group if they meet the `obs_filter` requirements. This provides speed benefits, particularly when running INLA time series using `predict_inla()`."},{"path":"/reference/predict_simple_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linearly interpolate data — predict_simple_fn","text":"data frame.","code":""},{"path":"/reference/probit_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Probit transform bounded data in a data frame — probit_transform","title":"Probit transform bounded data in a data frame — probit_transform","text":"probit_transform() transform specified columns data frame using VGAM::probitlink(). similar logit transformation better behaved extremes.","code":""},{"path":"/reference/probit_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probit transform bounded data in a data frame — probit_transform","text":"","code":"probit_transform(df, cols, inverse = FALSE)"},{"path":"/reference/probit_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probit transform bounded data in a data frame — probit_transform","text":"df data frame. cols Names columns transform. inverse Logical value indicating whether inverse transformation.","code":""},{"path":"/reference/probit_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probit transform bounded data in a data frame — probit_transform","text":"data frame.","code":""},{"path":"/reference/probit_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Probit transformation for bounded data — probit_vec","title":"Probit transformation for bounded data — probit_vec","text":"Similar logit transformation better behaved extremes","code":""},{"path":"/reference/probit_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probit transformation for bounded data — probit_vec","text":"","code":"probit_vec(x, inverse = FALSE)"},{"path":"/reference/probit_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probit transformation for bounded data — probit_vec","text":"x Numeric vector probit transform inverse Logical value whether invert transformation","code":""},{"path":"/reference/probit_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probit transformation for bounded data — probit_vec","text":"numeric vector","code":""},{"path":"/reference/remove_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove groups from data frame if grouped — remove_groups","title":"Remove groups from data frame if grouped — remove_groups","text":"Groups input data frames predict_... functions removed prevent errors fitting data bringing predictions data frame.","code":""},{"path":"/reference/remove_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove groups from data frame if grouped — remove_groups","text":"","code":"remove_groups(df)"},{"path":"/reference/remove_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove groups from data frame if grouped — remove_groups","text":"df Data frame.","code":""},{"path":"/reference/scale_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Scales data in a data frame — scale_transform","title":"Scales data in a data frame — scale_transform","text":"scale_transform() transform specified columns data frame using provided scale. divide = FALSE, simply x * scale, otherwise x / scale.","code":""},{"path":"/reference/scale_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scales data in a data frame — scale_transform","text":"","code":"scale_transform(df, cols, scale = 100, divide = TRUE)"},{"path":"/reference/scale_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scales data in a data frame — scale_transform","text":"df data frame. cols Names columns transform. scale Value scale vector(s) . Defaults 100 divide TRUE, divide vector scale. Otherwise, multiply.","code":""},{"path":"/reference/scale_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scales data in a data frame — scale_transform","text":"data frame.","code":""},{"path":"/reference/scale_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale a vector — scale_vec","title":"Scale a vector — scale_vec","text":"Scale vector","code":""},{"path":"/reference/scale_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale a vector — scale_vec","text":"","code":"scale_vec(x, scale, divide)"},{"path":"/reference/scale_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale a vector — scale_vec","text":"x Numeric vector. scale Value scale vector(s) . Defaults 100 divide TRUE, divide vector scale. Otherwise, multiply.","code":""},{"path":"/reference/simple_extrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to do flat extrapolation — simple_extrap","title":"Helper function to do flat extrapolation — simple_extrap","text":"Helper function flat extrapolation","code":""},{"path":"/reference/simple_extrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to do flat extrapolation — simple_extrap","text":"","code":"simple_extrap(x, model)"},{"path":"/reference/simple_extrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to do flat extrapolation — simple_extrap","text":"x Vector flat extrapolation model Type extrapolation (backward forward)","code":""},{"path":"/reference/temp_fill.html","id":null,"dir":"Reference","previous_headings":"","what":"Fills vector backwards and forward, for use prior to applying average trend — temp_fill","title":"Fills vector backwards and forward, for use prior to applying average trend — temp_fill","text":"Fills vector backwards forward, use prior applying average trend","code":""},{"path":"/reference/temp_fill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fills vector backwards and forward, for use prior to applying average trend — temp_fill","text":"","code":"temp_fill(x)"},{"path":"/reference/temp_fill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fills vector backwards and forward, for use prior to applying average trend — temp_fill","text":"x Vector fill, typically response vector","code":""},{"path":"/reference/trim_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Get latest data for forecasting — trim_series","title":"Get latest data for forecasting — trim_series","text":"Gets latest data forecasting. also gets number missing data points forecast.","code":""},{"path":"/reference/trim_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get latest data for forecasting — trim_series","text":"","code":"trim_series(x)"},{"path":"/reference/trim_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get latest data for forecasting — trim_series","text":"x Data series reduce forecasting","code":""},{"path":"/reference/trim_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get latest data for forecasting — trim_series","text":"Series contiguous observations followed NA values forecast.","code":""},{"path":"/news/index.html","id":"augury-033","dir":"Changelog","previous_headings":"","what":"augury 0.3.3","title":"augury 0.3.3","text":"predict_...() functions now treat confidence bounds way response predicted values. Upper lower bounds generated full pred_upper_col pred_lower_col existing bounds replaced based replace_obs presence non-missing values.","code":""},{"path":"/news/index.html","id":"augury-032","dir":"Changelog","previous_headings":"","what":"augury 0.3.2","title":"augury 0.3.2","text":"Use obs_filter predict_... functions replace replace_filter, allowing just filtering replace observations, also fitting models used improve speed reduce errors insufficient data certain types modeling. Add expand_df() function allow easy generation data frames explicit missing values prior passing predict_... functions.","code":""},{"path":"/news/index.html","id":"augury-031","dir":"Changelog","previous_headings":"","what":"augury 0.3.1","title":"augury 0.3.1","text":"Add back extrapolation (flat) predict_simple(). Add predict_aarr() allow use AARR forecasting prevalence data. Implement replace_filter predict_... functions allows select use predicted data based number observations different models can used different data typologies. Change defaults group_col sort_col \"iso3\" \"year\" respectively, since far common usage.","code":""},{"path":"/news/index.html","id":"augury-030","dir":"Changelog","previous_headings":"","what":"augury 0.3.0","title":"augury 0.3.0","text":"predict_..._avg_trend() functions implemented allow fitting models group application trend base data. Added R-squared root mean change error metrics model_error. Weighted averaging option added predict_average().","code":""},{"path":"/news/index.html","id":"augury-020","dir":"Changelog","previous_headings":"","what":"augury 0.2.0","title":"augury 0.2.0","text":"Added mean absolute scaled error, median absolute error, confidence bounds assessment error metrics. Refitted functions perform grouped modeling group_models argument, removing grouped_predict_... function aliases. Fix general functionality support model building testing. Add scale probit arguments predict_... functions enable automatic scaling transforming response variables prior model fitting.","code":""},{"path":"/news/index.html","id":"augury-010","dir":"Changelog","previous_headings":"","what":"augury 0.1.0","title":"augury 0.1.0","text":"Added NEWS.md file track changes package. Incorporated forecasting methods forecast package.","code":""}]
